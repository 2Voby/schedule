/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_change_theme_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/change-theme.js */ \"./src/js/modules/change-theme.js\");\n/* harmony import */ var _modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/saved-data.js */ \"./src/js/modules/saved-data.js\");\n/* harmony import */ var _modules_burger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/burger.js */ \"./src/js/modules/burger.js\");\n/* harmony import */ var _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/timeManagement.js */ \"./src/js/modules/timeManagement.js\");\n/* harmony import */ var _modules_holidays_popup_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/holidays-popup.js */ \"./src/js/modules/holidays-popup.js\");\n/* harmony import */ var _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/upcomingEvents.js */ \"./src/js/modules/upcomingEvents.js\");\n/* harmony import */ var _modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/navigation.js */ \"./src/js/modules/navigation.js\");\n\r\n// при відкриванні сторінки одразу перейти на сторінку для студентів\r\nlocation.hash = \"#students\";\r\n\r\nlet loading = document.querySelector(\".page-loading\");\r\n\r\n// change theme\r\n\r\n_modules_change_theme_js__WEBPACK_IMPORTED_MODULE_0__.themeChanger();\r\n\r\n// import saved params\r\n\r\n_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.savedButtonsFunc();\r\n// let savePageOptions = JSON.parse(localStorage.getItem(\"savePageOptions\"));\r\n// let saveChoosedOptions = JSON.parse(localStorage.getItem(\"saveChoosedOptions\"));\r\n\r\n// burger button\r\n\r\n_modules_burger_js__WEBPACK_IMPORTED_MODULE_2__.burgerButton();\r\n\r\n// time managment\r\n\r\n\r\n// import holiday popup\r\n\r\n\r\n//import upcoming events\r\n\r\n\r\n//page navigation\r\n\r\n_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.navigation();\r\n// import form sending\r\n// import * as flsMessageForm from \"./modules/message-form.js\";\r\n// flsMessageForm.messageForm();\r\n\r\n// get data from base\r\nasync function getData() {\r\n  let response = await fetch(\"https://schedule-server.onrender.com/users\");\r\n  //https://schedule-server.onrender.com/users\r\n  return response;\r\n}\r\n\r\nscheduleDataManagement();\r\nasync function scheduleDataManagement() {\r\n  let response;\r\n  let localStorageJson;\r\n  localStorage.removeItem(\"savedData\");\r\n  let savedData = localStorage.getItem(\"savedData\");\r\n\r\n  if (savedData) {\r\n    // reset loading animation\r\n    loading.style.display = \"none\";\r\n    localStorageJson = JSON.parse(savedData);\r\n    allowSchedule(localStorageJson);\r\n    console.log(\"local\");\r\n    // get responce from base\r\n    response = await getData();\r\n    response = await response.json();\r\n    // check json\r\n  } else if (!savedData) {\r\n    response = await getData();\r\n    let json = await response.json();\r\n    json = json[0];\r\n    if (response.ok) {\r\n      localStorage.setItem(\"savedData\", JSON.stringify(json));\r\n      allowSchedule(json);\r\n    } else {\r\n      console.log(\"невідома помилка завантаження даних\");\r\n    }\r\n  }\r\n  if (!response.ok) {\r\n    console.log(\"помилка оновлення даних\");\r\n  }\r\n}\r\n\r\nasync function UpdateData() {\r\n  let localData = localStorage.getItem(\"savedData\");\r\n  let DataFromBase = await getData();\r\n  DataFromBase = await DataFromBase.json();\r\n  let savedData = localStorage.getItem(\"savedData\");\r\n  let currJson;\r\n  if (savedData) {\r\n    if (checkUpdates(localData, DataFromBase)) {\r\n      allowSchedule(DataFromBase);\r\n      console.log(\"updated\");\r\n      console.log(DataFromBase);\r\n    } else console.log(\"still past\");\r\n  } else if (!savedData) {\r\n    response = await getData();\r\n    let json = await response.json();\r\n  }\r\n}\r\n\r\nfunction checkUpdates(local, fromBase) {\r\n  let flag = false;\r\n  let localData = local;\r\n  let DataFromBase = fromBase;\r\n  let localDataUpdateTime = localData.TimeOfUpdate;\r\n  let dataFromBaseUpdateTime = DataFromBase.TimeOfUpdate;\r\n  // check date\r\n  if (dataFromBaseUpdateTime == localDataUpdateTime) {\r\n    localStorage.setItem(\"savedData\", JSON.stringify(DataFromBase));\r\n    flag = true;\r\n  } else flag = false;\r\n\r\n  return flag;\r\n}\r\n\r\nasync function allowSchedule(json) {\r\n  let scheduleArr = json.Schedule;\r\n  let scheduleBells = json.ScheduleBell;\r\n  let teachersList = json.TeachersList;\r\n  const compliedSchedule = json.CompliedSchedule;\r\n  let extraClassesSchedule = json.ExtraClasses;\r\n  _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__.timeManagement(json.TimeManagementData);\r\n  // reset loading animation\r\n  loading.style.display = \"none\";\r\n  //==================================global variables=========================================\r\n  //===========================================================================================\r\n  var weekCounter = 0;\r\n  let dayCounter = 0;\r\n  let pairCounter = 0;\r\n  let currentGroup;\r\n  let currentTeacher;\r\n  let currentGroupColumn;\r\n  let scheduleTogglerCondition = false;\r\n  let choosedWeek;\r\n  let teacherSchedule;\r\n  let teacherScheduleCompiled = [];\r\n  let dayLessons = [1, 2, 3, 4];\r\n  let groupsList = [];\r\n  let choosedExtraLesson;\r\n  let choosedExtraLessonArr;\r\n  let currWeekExist;\r\n  let weekAlways;\r\n  let studingConditional = _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__.studingConditional;\r\n  let updateDayInterval;\r\n  //============================================Code===========================================\r\n  //===========================================================================================\r\n\r\n  // holidays popup\r\n\r\n  let isHoliday = _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__.IsHolidays;\r\n  _modules_holidays_popup_js__WEBPACK_IMPORTED_MODULE_4__.holidaysPopup(isHoliday, json.TimeManagementData);\r\n\r\n  // schedule's code\r\n  createBellSchedule();\r\n  createGroupsList();\r\n  if (location.hash == \"\") {\r\n    togglerFunc();\r\n    // getting toggler data\r\n    choosedSchedule();\r\n    //creating group button\r\n    groupBtn();\r\n    // відображення найближчої події\r\n    try {\r\n      _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  } else if (location.hash == \"#students\") {\r\n    // відображення найближчої події\r\n    _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n    if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().studentsPageSave) {\r\n      // отримання збереженого параметра\r\n      let savedStudentsOption = JSON.parse(\r\n        localStorage.getItem(\"saveChoosedOptions\")\r\n      ).studentsPageSave;\r\n      // передача параметра до кнопки\r\n      currentGroup = savedStudentsOption;\r\n      // додавання парамерту в кнопку\r\n      let groupDrop = document.querySelector(\".dropdown-group\");\r\n      if (groupDrop) {\r\n        let groupDropBtn = groupDrop.querySelector(\".dropdown__button\");\r\n        groupDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n          savedStudentsOption;\r\n      }\r\n      // відображення розкладу згідно збереженого параметру\r\n      if (scheduleTogglerCondition == false) {\r\n        resetInterval(updateDayInterval);\r\n        findGroup();\r\n        loadSchedule();\r\n        getCurrWeek();\r\n        showCurrWeek();\r\n      } else {\r\n        resetInterval(updateDayInterval);\r\n        findGroup();\r\n        loadSchedule();\r\n        getCurrWeek();\r\n        createWeekButton();\r\n      }\r\n    }\r\n    togglerFunc();\r\n    createBellSchedule();\r\n    choosedSchedule();\r\n    groupBtn();\r\n  } else if (location.hash == \"#teachers\") {\r\n    // відображення найближчої події\r\n    _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n    if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().teachersPageSave) {\r\n      // отримання збереженого параметра\r\n      let savedTeachersOption = JSON.parse(\r\n        localStorage.getItem(\"saveChoosedOptions\")\r\n      ).teachersPageSave;\r\n      // передача параметра до кнопки\r\n      currentTeacher = savedTeachersOption;\r\n      // додавання парамерту в кнопку\r\n      let teachersDrop = document.querySelector(\".dropdown-teacher\");\r\n      if (teachersDrop) {\r\n        let teachersDropBtn = teachersDrop.querySelector(\".dropdown__button\");\r\n        teachersDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n          savedTeachersOption;\r\n      }\r\n      // відображення розкладу згідно збереженого параметру\r\n      createTeacherScheduleArr();\r\n      resetInterval(updateDayInterval);\r\n      getCurrWeek();\r\n      resetTeachersGropBtn();\r\n      createTeachersGropBtn();\r\n      if (scheduleTogglerCondition == false) {\r\n        showCurrWeek();\r\n      } else if (scheduleTogglerCondition == true) {\r\n        showAllWeeks();\r\n        createWeekButton();\r\n      }\r\n    }\r\n\r\n    // додавання функціоналу\r\n    togglerFunc();\r\n    createBellSchedule();\r\n    creteTeachersList();\r\n    choosedSchedule();\r\n  } else if (location.hash == \"#extraclasses\") {\r\n    // відображення найближчої події\r\n    _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n    //автозаповнення\r\n    if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().extraPageSave) {\r\n      // отримання збереженого параметра\r\n      let savedExtraOption = JSON.parse(\r\n        localStorage.getItem(\"saveChoosedOptions\")\r\n      ).extraPageSave;\r\n      // передача параметра до кнопки\r\n      choosedExtraLesson = savedExtraOption;\r\n      // додавання парамерту в кнопку\r\n      let extraclassesGroupBtnBlock = document.querySelector(\r\n        \".dropdown__block-extraclasses\"\r\n      );\r\n      if (extraclassesGroupBtnBlock) {\r\n        extraclassesGroupBtnBlock.classList.remove(\"hidden\");\r\n        // variables\r\n        let extraclassesGroupDrop = document.querySelector(\r\n          \".dropdown-extraclasses\"\r\n        );\r\n        let extraclassesGroupDropBtn =\r\n          extraclassesGroupDrop.querySelector(\".dropdown__button\");\r\n        extraclassesGroupDropBtn.querySelector(\r\n          \".dropdown__button-text\"\r\n        ).innerText = savedExtraOption;\r\n      }\r\n      // відображення розкладу згідно збереженого параметру\r\n      loadExtraclassesSchedule();\r\n      resetInterval(updateDayInterval);\r\n      getCurrWeek();\r\n      if (scheduleTogglerCondition == false) {\r\n        if (currWeekExist) {\r\n          showCurrWeek();\r\n        } else {\r\n          showCurrWeek();\r\n          console.log(\"поточний тиждень не знайдено\");\r\n        }\r\n      } else if (scheduleTogglerCondition == true) {\r\n        if (choosedExtraLessonArr[1].length == 1) {\r\n          showAllWeeks();\r\n          let dropdownWeek = document.querySelector(\".dropdown__block-week\");\r\n          if (dropdownWeek) {\r\n            dropdownWeek.classList.remove(\"dropdown-week--visible\");\r\n          }\r\n        } else {\r\n          createWeekButton();\r\n          showAllWeeks();\r\n        }\r\n      }\r\n    }\r\n    //додавання функціоналу\r\n    togglerFunc();\r\n    createBellSchedule();\r\n    createExtraClassesButton();\r\n    choosedSchedule();\r\n  }\r\n\r\n  // on change students\r\n  window.addEventListener(\"hashchange\", function (e) {\r\n    if (location.hash == \"#students\") {\r\n      // відображення найближчої події\r\n      _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n      //автозаповнення\r\n      if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().studentsPageSave) {\r\n        // отримання збереженого параметра\r\n        let savedStudentsOption = JSON.parse(\r\n          localStorage.getItem(\"saveChoosedOptions\")\r\n        ).studentsPageSave;\r\n        // передача параметра до кнопки\r\n        currentGroup = savedStudentsOption;\r\n        // додавання парамерту в кнопку\r\n        let groupDrop = document.querySelector(\".dropdown-group\");\r\n        if (groupDrop) {\r\n          let groupDropBtn = groupDrop.querySelector(\".dropdown__button\");\r\n          groupDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n            savedStudentsOption;\r\n        }\r\n        // відображення розкладу згідно збереженого параметру\r\n        if (scheduleTogglerCondition == false) {\r\n          resetInterval(updateDayInterval);\r\n          findGroup();\r\n          loadSchedule();\r\n          getCurrWeek();\r\n          showCurrWeek();\r\n        } else {\r\n          resetInterval(updateDayInterval);\r\n          findGroup();\r\n          loadSchedule();\r\n          getCurrWeek();\r\n          createWeekButton();\r\n        }\r\n      }\r\n      // додавання функцій\r\n      resetInterval(updateDayInterval);\r\n      togglerFunc();\r\n      createBellSchedule();\r\n      choosedSchedule();\r\n      groupBtn();\r\n    } else if (location.hash == \"#teachers\") {\r\n      // відображення найближчої події\r\n      _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n      //автозаповнення\r\n      if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().teachersPageSave) {\r\n        // отримання збереженого параметра\r\n        let savedTeachersOption = JSON.parse(\r\n          localStorage.getItem(\"saveChoosedOptions\")\r\n        ).teachersPageSave;\r\n        // передача параметра до кнопки\r\n        currentTeacher = savedTeachersOption;\r\n        // додавання парамерту в кнопку\r\n        let teachersDrop = document.querySelector(\".dropdown-teacher\");\r\n        if (teachersDrop) {\r\n          let teachersDropBtn = teachersDrop.querySelector(\".dropdown__button\");\r\n          teachersDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n            savedTeachersOption;\r\n        }\r\n        // відображення розкладу згідно збереженого параметру\r\n        createTeacherScheduleArr();\r\n        resetInterval(updateDayInterval);\r\n        getCurrWeek();\r\n        resetTeachersGropBtn();\r\n        createTeachersGropBtn();\r\n        if (scheduleTogglerCondition == false) {\r\n          showCurrWeek();\r\n        } else if (scheduleTogglerCondition == true) {\r\n          showAllWeeks();\r\n          createWeekButton();\r\n        }\r\n      }\r\n      // додавання функціоналу\r\n      resetInterval(updateDayInterval);\r\n      togglerFunc();\r\n      createBellSchedule();\r\n      creteTeachersList();\r\n      choosedSchedule();\r\n    } else if (location.hash == \"#extraclasses\") {\r\n      // відображення найближчої події\r\n      _modules_upcomingEvents_js__WEBPACK_IMPORTED_MODULE_5__.UpcomingEvents(json);\r\n      //автозаповнення\r\n      if (_modules_saved_data_js__WEBPACK_IMPORTED_MODULE_1__.showSavedData().extraPageSave) {\r\n        // отримання збереженого параметра\r\n        let savedExtraOption = JSON.parse(\r\n          localStorage.getItem(\"saveChoosedOptions\")\r\n        ).extraPageSave;\r\n        // передача параметра до кнопки\r\n        choosedExtraLesson = savedExtraOption;\r\n        // додавання парамерту в кнопку\r\n        let extraclassesGroupBtnBlock = document.querySelector(\r\n          \".dropdown__block-extraclasses\"\r\n        );\r\n        if (extraclassesGroupBtnBlock) {\r\n          extraclassesGroupBtnBlock.classList.remove(\"hidden\");\r\n          // variables\r\n          let extraclassesGroupDrop = document.querySelector(\r\n            \".dropdown-extraclasses\"\r\n          );\r\n          let extraclassesGroupDropBtn =\r\n            extraclassesGroupDrop.querySelector(\".dropdown__button\");\r\n          extraclassesGroupDropBtn.querySelector(\r\n            \".dropdown__button-text\"\r\n          ).innerText = savedExtraOption;\r\n        }\r\n        // відображення розкладу згідно збереженого параметру\r\n        loadExtraclassesSchedule();\r\n        resetInterval(updateDayInterval);\r\n        getCurrWeek();\r\n        if (scheduleTogglerCondition == false) {\r\n          if (currWeekExist) {\r\n            showCurrWeek();\r\n          } else {\r\n            showCurrWeek();\r\n            console.log(\"поточний тиждень не знайдено\");\r\n          }\r\n        } else if (scheduleTogglerCondition == true) {\r\n          if (choosedExtraLessonArr[1].length == 1) {\r\n            showAllWeeks();\r\n            let dropdownWeek = document.querySelector(\".dropdown__block-week\");\r\n            if (dropdownWeek) {\r\n              dropdownWeek.classList.remove(\"dropdown-week--visible\");\r\n            }\r\n          } else {\r\n            createWeekButton();\r\n            showAllWeeks();\r\n          }\r\n        }\r\n      }\r\n\r\n      // додавання функціоналу\r\n      resetInterval(updateDayInterval);\r\n      togglerFunc();\r\n      createBellSchedule();\r\n      createExtraClassesButton();\r\n      choosedSchedule();\r\n    }\r\n  });\r\n\r\n  //======================================================================\r\n  //============================functions=================================\r\n  //======================================================================\r\n  // create extraclasses button\r\n  function createExtraClassesButton() {\r\n    let extraclassesGroupBtnBlock = document.querySelector(\r\n      \".dropdown__block-extraclasses\"\r\n    );\r\n    if (extraclassesGroupBtnBlock) {\r\n      extraclassesGroupBtnBlock.classList.remove(\"hidden\");\r\n      // variables\r\n      let extraclassesGroupDrop = document.querySelector(\r\n        \".dropdown-extraclasses\"\r\n      );\r\n      let extraclassesGroupDropBtn =\r\n        extraclassesGroupDrop.querySelector(\".dropdown__button\");\r\n      let extraclassesGroupDropList =\r\n        extraclassesGroupDrop.querySelector(\".dropdown__list\");\r\n      // reset data in list if have something\r\n      let extraclassesGroupList =\r\n        extraclassesGroupDropList.querySelectorAll(\"li\");\r\n      if (extraclassesGroupList.length > 0) {\r\n        extraclassesGroupList.forEach((item) => {\r\n          item.remove();\r\n        });\r\n      }\r\n      //fill group list\r\n      extraClassesSchedule.forEach((item) => {\r\n        let groupDropItem = document.createElement(\"li\");\r\n        groupDropItem.innerText = item[0];\r\n        groupDropItem.classList.add(\"dropdown__list-item\");\r\n        extraclassesGroupDropList.appendChild(groupDropItem);\r\n      });\r\n      // find all created items\r\n      let extraclassesGroupDropListItems =\r\n        extraclassesGroupDropList.querySelectorAll(\".dropdown__list-item\");\r\n      // open/close dropdown when click on button\r\n      extraclassesGroupDropBtn.addEventListener(\"click\", function () {\r\n        extraclassesGroupDropList.classList.add(\"dropdown__list--visible\");\r\n        this.classList.add(\"dropdown__button--active\");\r\n      });\r\n      //choose elem\r\n      extraclassesGroupDropListItems.forEach(function (listItem) {\r\n        listItem.addEventListener(\"click\", function () {\r\n          let choosedGroup = this.innerText;\r\n          extraclassesGroupDropBtn.querySelector(\r\n            \".dropdown__button-text\"\r\n          ).innerText = choosedGroup;\r\n          choosedExtraLesson = choosedGroup;\r\n          extraClassesSchedule.forEach((Classes) => {\r\n            if (Classes[0] == choosedExtraLesson) {\r\n              choosedExtraLessonArr = Classes;\r\n            }\r\n          });\r\n\r\n          // отримання актуальних збережень\r\n          let savePageOptions = JSON.parse(\r\n            localStorage.getItem(\"savePageOptions\")\r\n          );\r\n          let saveChoosedOptions = JSON.parse(\r\n            localStorage.getItem(\"saveChoosedOptions\")\r\n          );\r\n          // перевірка чи ввімкнено авто збереження\r\n          if (savePageOptions.extraPageSave == true) {\r\n            // якщо ввімкнено то зберігати кожен вибір на сторінці\r\n            saveChoosedOptions.extraPageSave = choosedGroup;\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(saveChoosedOptions)\r\n            );\r\n          }\r\n\r\n          loadExtraclassesSchedule();\r\n          resetInterval(updateDayInterval);\r\n          getCurrWeek();\r\n          if (scheduleTogglerCondition == false) {\r\n            if (currWeekExist) {\r\n              showCurrWeek();\r\n            } else {\r\n              showCurrWeek();\r\n              console.log(\"поточний тиждень не знайдено\");\r\n            }\r\n          } else if (scheduleTogglerCondition == true) {\r\n            if (choosedExtraLessonArr[1].length == 1) {\r\n              showAllWeeks();\r\n              let dropdownWeek = document.querySelector(\r\n                \".dropdown__block-week\"\r\n              );\r\n              if (dropdownWeek) {\r\n                dropdownWeek.classList.remove(\"dropdown-week--visible\");\r\n              }\r\n            } else {\r\n              createWeekButton();\r\n              showAllWeeks();\r\n            }\r\n          }\r\n          extraclassesGroupDropList.classList.remove(\"dropdown__list--visible\");\r\n        });\r\n      });\r\n      // close dropdown when click beyond the button\r\n      document.addEventListener(\"click\", function (e) {\r\n        if (\r\n          e.target !== extraclassesGroupDropBtn &&\r\n          e.target !==\r\n            extraclassesGroupDropBtn.querySelector(\".dropdown__button-img\") &&\r\n          e.target !==\r\n            extraclassesGroupDropBtn.querySelector(\".dropdown__button-text\")\r\n        ) {\r\n          extraclassesGroupDropBtn.classList.remove(\"dropdown__button--active\");\r\n          extraclassesGroupDropList.classList.remove(\"dropdown__list--visible\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function loadExtraclassesSchedule() {\r\n    extraClassesSchedule.forEach((Classes) => {\r\n      let ClassesContent = Classes[1];\r\n      if (Classes[0] == choosedExtraLesson) {\r\n        resetSchedule();\r\n        let wrapper = document.createElement(\"div\");\r\n        wrapper.classList.add(\"schedule__wrapper\");\r\n        let scheduleWrapper = document\r\n          .getElementById(\"schedule-block-body\")\r\n          .appendChild(wrapper);\r\n        let extraClassesContent = document.createElement(\"div\");\r\n        extraClassesContent.classList.add(\"extraclasses-content\");\r\n        scheduleWrapper.appendChild(extraClassesContent);\r\n\r\n        ClassesContent.forEach((week) => {\r\n          weekCounter++;\r\n          let weekName = week[0];\r\n          let weekContent = week[1];\r\n          let weekBlock = document.createElement(\"div\");\r\n          weekBlock.classList.add(\r\n            \"schedule-block-body__week\",\r\n            \"schedule-block-body__week-\" + weekCounter\r\n          );\r\n          if (weekName == weekAlways) {\r\n            weekBlock.id = \"завжди\";\r\n          } else weekBlock.id = weekName;\r\n          extraClassesContent.appendChild(weekBlock);\r\n          // create week title\r\n          let weekTitle = document.createElement(\"p\");\r\n          weekTitle.classList.add(\"week__title\");\r\n          weekTitle.innerText = weekName;\r\n          weekBlock.appendChild(weekTitle);\r\n          // add week content\r\n          let weekInner = document.createElement(\"div\");\r\n          weekInner.classList.add(\"week__content\");\r\n          weekBlock.appendChild(weekInner);\r\n          dayCounter = 0;\r\n          weekContent.forEach((day) => {\r\n            dayCounter++;\r\n            let dayName = day[0];\r\n            let dayContent = day[1];\r\n            let dayBlock = document.createElement(\"div\");\r\n            dayBlock.classList.add(\"day\");\r\n            dayBlock.setAttribute(\"id\", \"day-\" + dayCounter);\r\n            weekInner.appendChild(dayBlock);\r\n            // create day title\r\n            let dayTitle = document.createElement(\"h2\");\r\n            dayTitle.classList.add(\"day__title\");\r\n            dayTitle.innerHTML = dayName;\r\n            dayBlock.appendChild(dayTitle);\r\n            // create day content\r\n            pairCounter = 0;\r\n            dayContent.forEach((lesson) => {\r\n              let dayLesson = document.createElement(\"div\");\r\n              pairCounter++;\r\n              dayLesson.classList.add(\r\n                \"extra__lesson\",\r\n                \"day__lesson\",\r\n                \"lesson-\" + pairCounter\r\n              );\r\n              dayBlock.appendChild(dayLesson);\r\n              lesson.forEach((lessonItem) => {\r\n                let lessonInner = document.createElement(\"div\");\r\n                lessonInner.classList.add(\"item\", \"lesson__item\");\r\n                if (lessonItem == \".\") {\r\n                  lessonItem = \" \";\r\n                }\r\n                lessonInner.innerText = lessonItem;\r\n                dayLesson.appendChild(lessonInner);\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //color current exrtra lesson\r\n  function colorCurrentExtraLesson(currDay) {\r\n    let currentDay = document.querySelector(\".current-day\");\r\n    if (currentDay) {\r\n      let elements = currentDay.querySelectorAll(\".extra__lesson\");\r\n      // clear all curr pairs\r\n      let currPairs = document.querySelectorAll(\".current-pair\");\r\n      currPairs.forEach(function (item, i, arr) {\r\n        item.classList.remove(\"current-pair\");\r\n      });\r\n\r\n      //log day lessons\r\n      // create new curr pairs\r\n      let day = [\"08:00-21:00\"];\r\n      elements.forEach((lessonItem, i) => {\r\n        var currTime = new Date();\r\n        day.forEach((item) => {\r\n          let day = item.split(\"-\");\r\n          let s = day[0].split(\":\");\r\n          let startDay = new Date(\r\n            currTime.getFullYear(),\r\n            currTime.getMonth(),\r\n            currTime.getDate(),\r\n            parseInt(s[0]),\r\n            parseInt(s[1])\r\n          );\r\n          let e = day[1].split(\":\");\r\n          let endDay = new Date(\r\n            currTime.getFullYear(),\r\n            currTime.getMonth(),\r\n            currTime.getDate(),\r\n            parseInt(e[0]),\r\n            parseInt(e[1])\r\n          );\r\n          if (currTime >= startDay && currTime < endDay) {\r\n            let lessonItems = lessonItem.querySelectorAll(\".item\");\r\n            let lessonItemTime = lessonItems[0].innerHTML;\r\n            if (lessonItemTime != \"\" && lessonItemTime != \" \") {\r\n              // get time\r\n              let lesson = lessonItemTime.split(\"-\");\r\n              let s = lesson[0].split(\":\");\r\n              let startLesson = new Date(\r\n                currTime.getFullYear(),\r\n                currTime.getMonth(),\r\n                currTime.getDate(),\r\n                parseInt(s[0]),\r\n                parseInt(s[1])\r\n              );\r\n              let e = lesson[1].split(\":\");\r\n              let finishLesson = new Date(\r\n                currTime.getFullYear(),\r\n                currTime.getMonth(),\r\n                currTime.getDate(),\r\n                parseInt(e[0]),\r\n                parseInt(e[1])\r\n              );\r\n              if (currTime >= startLesson && currTime <= finishLesson) {\r\n                lessonItem.classList.add(\"current-pair\");\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n  //creting teachers list\r\n  function creteTeachersList() {\r\n    let teachersDropdown = document.querySelector(\".dropdown-list__teachers\");\r\n    if (teachersDropdown) {\r\n      let teachersDropdownItem = teachersDropdown.querySelectorAll(\r\n        \".dropdown__list-item\"\r\n      );\r\n      if (teachersDropdownItem) {\r\n        teachersDropdownItem.forEach((item) => {\r\n          item.remove();\r\n        });\r\n      }\r\n      // create list\r\n      teachersList.forEach(function (item) {\r\n        let teachersDropItem = document.createElement(\"li\");\r\n        teachersDropItem.innerText = item;\r\n        teachersDropItem.classList.add(\"dropdown__list-item\");\r\n        teachersDropdown.appendChild(teachersDropItem);\r\n      });\r\n    }\r\n    // button func ------------------------------------------------------------\r\n    // кнопка розкладу для вчителів\r\n    let teachersDrop = document.querySelector(\".dropdown-teacher\");\r\n    if (teachersDrop) {\r\n      let teachersDropBtn = teachersDrop.querySelector(\".dropdown__button\");\r\n      let teachersDropList = teachersDrop.querySelector(\".dropdown__list\");\r\n      let teachersDropListItems = teachersDropList.querySelectorAll(\r\n        \".dropdown__list-item\"\r\n      );\r\n\r\n      // open/close dropdown when click on button\r\n\r\n      teachersDropBtn.addEventListener(\"click\", function () {\r\n        teachersDropList.classList.add(\"dropdown__list--visible\");\r\n        this.classList.add(\"dropdown__button--active\");\r\n      });\r\n\r\n      //choose elem\r\n      teachersDropListItems.forEach(function (listItem) {\r\n        listItem.addEventListener(\"click\", function () {\r\n          teachersDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n            this.innerText;\r\n          teachersDropList.classList.remove(\"dropdown__list--visible\");\r\n          currentTeacher = this.innerText;\r\n          // отримання актуального збереження\r\n          let savePageOptions = JSON.parse(\r\n            localStorage.getItem(\"savePageOptions\")\r\n          );\r\n          let saveChoosedOptions = JSON.parse(\r\n            localStorage.getItem(\"saveChoosedOptions\")\r\n          );\r\n          // перевірка чи ввімкнено авто збереження\r\n          if (savePageOptions.teachersPageSave) {\r\n            // якщо ввімкнено то зберігати кожен вибір на сторінці\r\n            saveChoosedOptions.teachersPageSave = currentTeacher;\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(saveChoosedOptions)\r\n            );\r\n          }\r\n          createTeacherScheduleArr();\r\n          resetInterval(updateDayInterval);\r\n          getCurrWeek();\r\n          resetTeachersGropBtn();\r\n          createTeachersGropBtn();\r\n          if (scheduleTogglerCondition == false) {\r\n            showCurrWeek();\r\n          } else if (scheduleTogglerCondition == true) {\r\n            showAllWeeks();\r\n            createWeekButton();\r\n          }\r\n        });\r\n      });\r\n\r\n      // close dropdown when click beyond the button\r\n      document.addEventListener(\"click\", function (e) {\r\n        if (\r\n          e.target !== teachersDropBtn &&\r\n          e.target !== teachersDropBtn.querySelector(\".dropdown__button-img\") &&\r\n          e.target !== teachersDropBtn.querySelector(\".dropdown__button-text\")\r\n        ) {\r\n          teachersDropBtn.classList.remove(\"dropdown__button--active\");\r\n          teachersDropList.classList.remove(\"dropdown__list--visible\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // create teachers group btn\r\n  function createTeachersGropBtn() {\r\n    let teacherGroupBtnBlock = document.querySelector(\".dropdown__block-group\");\r\n    if (teacherGroupBtnBlock) {\r\n      teacherGroupBtnBlock.classList.add(\"dropdown__block-group--visible\");\r\n      // variables\r\n      let teacherGroupDrop = document.querySelector(\".dropdown-group\");\r\n      let teacherGroupDropBtn =\r\n        teacherGroupDrop.querySelector(\".dropdown__button\");\r\n      let teacherGroupDropList =\r\n        teacherGroupDrop.querySelector(\".dropdown__list\");\r\n      // reset data in list if have something\r\n      let teacherGroupList = teacherGroupDropList.querySelectorAll(\"li\");\r\n      if (teacherGroupList.length > 0) {\r\n        teacherGroupList.forEach((item) => {\r\n          item.remove();\r\n        });\r\n      }\r\n      //fill group list\r\n      groupsList.forEach((groupName) => {\r\n        let groupDropItem = document.createElement(\"li\");\r\n        groupDropItem.innerText = groupName;\r\n        groupDropItem.classList.add(\"dropdown__list-item\");\r\n        teacherGroupDropList.appendChild(groupDropItem);\r\n      });\r\n      // find all created items\r\n      let teacherGroupDropListItems = teacherGroupDropList.querySelectorAll(\r\n        \".dropdown__list-item\"\r\n      );\r\n      // open/close dropdown when click on button\r\n      teacherGroupDropBtn.addEventListener(\"click\", function () {\r\n        teacherGroupDropList.classList.add(\"dropdown__list--visible\");\r\n        this.classList.add(\"dropdown__button--active\");\r\n      });\r\n      //choose elem\r\n      teacherGroupDropListItems.forEach(function (listItem) {\r\n        listItem.addEventListener(\"click\", function () {\r\n          let choosedGroup = this.innerText;\r\n          teacherGroupDropBtn.querySelector(\r\n            \".dropdown__button-text\"\r\n          ).innerText = choosedGroup;\r\n          colorChoosedGroup(choosedGroup);\r\n          teacherGroupDropList.classList.remove(\"dropdown__list--visible\");\r\n        });\r\n      });\r\n      // close dropdown when click beyond the button\r\n      document.addEventListener(\"click\", function (e) {\r\n        if (\r\n          e.target !== teacherGroupDropBtn &&\r\n          e.target !==\r\n            teacherGroupDropBtn.querySelector(\".dropdown__button-img\") &&\r\n          e.target !==\r\n            teacherGroupDropBtn.querySelector(\".dropdown__button-text\")\r\n        ) {\r\n          teacherGroupDropBtn.classList.remove(\"dropdown__button--active\");\r\n          teacherGroupDropList.classList.remove(\"dropdown__list--visible\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // color choosed by teacher group\r\n  function colorChoosedGroup(option) {\r\n    //reset all\r\n    let choosedLesson = document.querySelectorAll(\".choosed-lesson-by-teacher\");\r\n    choosedLesson.forEach((lesson) => {\r\n      lesson.classList.remove(\"choosed-lesson-by-teacher\");\r\n    });\r\n    let scheduleWrapper = document.querySelector(\".teachers-content\");\r\n    if (scheduleWrapper) {\r\n      let AllLessons = scheduleWrapper.querySelectorAll(\".day__lesson\");\r\n      AllLessons.forEach((lesson) => {\r\n        let lessonItems = lesson.querySelectorAll(\".lesson__item\");\r\n        lessonItems.forEach((lessonItem) => {\r\n          if (lessonItem.innerText == option) {\r\n            lesson.classList.add(\"choosed-lesson-by-teacher\");\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // creating teacher list\r\n  function createTeacherScheduleArr() {\r\n    teacherSchedule = arrayClone(compliedSchedule);\r\n    let foundedLesson = [];\r\n    teacherSchedule.forEach((week) => {\r\n      week[1].forEach((day) => {\r\n        // getting elements consist curr teacher and push them in arr\r\n        day[1].forEach(function (lesson, i) {\r\n          if (lesson.includes(currentTeacher)) {\r\n            foundedLesson.push(lesson);\r\n          }\r\n        });\r\n        // delete all elements from this day\r\n        day[1].splice(0, day[1].length);\r\n        // push only element we need in this day\r\n\r\n        if (foundedLesson.length > 0) {\r\n          foundedLesson.forEach((item) => {\r\n            day[1].push(item);\r\n          });\r\n        }\r\n        // reset arr with elements\r\n        foundedLesson = [];\r\n      });\r\n    });\r\n    collectTeachersScheduleToOneArr();\r\n  }\r\n  // create one teachers arr\r\n  function collectTeachersScheduleToOneArr() {\r\n    teacherScheduleCompiled = [];\r\n    // crete Compiled arr ====================================================\r\n    // crete weeks\r\n    let weeksArr = [];\r\n    teacherSchedule.forEach((weekName) => {\r\n      weeksArr.push(weekName[0]);\r\n    });\r\n    weeksArr = new Set(weeksArr);\r\n    weeksArr.forEach((week) => {\r\n      teacherScheduleCompiled.push([week]);\r\n    });\r\n\r\n    // create days\r\n    let weekDays = [];\r\n    teacherSchedule.forEach((week) => {\r\n      week[1].forEach((day) => {\r\n        weekDays.push(day[0]);\r\n      });\r\n    });\r\n    weekDays = new Set(weekDays);\r\n    // push days into weeks\r\n    teacherScheduleCompiled.forEach((week) => {\r\n      let weekContent = [];\r\n      weekDays.forEach((dayName) => {\r\n        let dayItem = [];\r\n        dayItem.push(dayName, []);\r\n        weekContent.push(dayItem);\r\n      });\r\n      week.push(weekContent);\r\n    });\r\n    // =======================================================================\r\n\r\n    // fill compilated arr ===================================================\r\n    teacherScheduleCompiled.forEach((CompiledWeek) => {\r\n      teacherSchedule.forEach((teacherWeek) => {\r\n        if (CompiledWeek[0] == teacherWeek[0]) {\r\n          CompiledWeek[1].forEach((createdDay) => {\r\n            teacherWeek[1].forEach((teacherDay) => {\r\n              let cretedDayName = createdDay[0];\r\n              let dayName = teacherDay[0];\r\n              let createdDayContent = createdDay[1];\r\n              let dayContent = teacherDay[1];\r\n              if (cretedDayName == dayName) {\r\n                if (dayContent.length > 0) {\r\n                  dayContent.forEach((dayLessons) => {\r\n                    createdDayContent.push(dayLessons);\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    });\r\n    // =======================================================================\r\n    // adding empty lessons\r\n    let minLessonsPerDay = [];\r\n    // finding emplty lessons\r\n    teacherScheduleCompiled.forEach((week, i) => {\r\n      week[1].forEach((day) => {\r\n        minLessonsPerDay = arrayClone(dayLessons);\r\n        day[1].forEach((lesson) => {\r\n          dayLessons.forEach((lessonNum, i) => {\r\n            if (lessonNum == lesson[0]) {\r\n              minLessonsPerDay.splice(minLessonsPerDay.indexOf(lesson[0]), 1);\r\n            }\r\n          });\r\n        });\r\n        // pushing empty lessons to arr\r\n        minLessonsPerDay.forEach((emptyLesson) => {\r\n          day[1].push([emptyLesson]);\r\n        });\r\n\r\n        // sort lessons from 1 to 4\r\n        day[1].sort();\r\n      });\r\n    });\r\n\r\n    // =======================================================================\r\n\r\n    loadTeachersSchedule(teacherScheduleCompiled);\r\n  }\r\n  // load teachers schedule\r\n  function loadTeachersSchedule(schedule) {\r\n    let leacherSchedule = arrayClone(schedule);\r\n    resetSchedule();\r\n    let wrapper = document.createElement(\"div\");\r\n    wrapper.classList.add(\"schedule__wrapper\");\r\n    let scheduleWrapper = document\r\n      .getElementById(\"schedule-block-body\")\r\n      .appendChild(wrapper);\r\n    let teachersContent = document.createElement(\"div\");\r\n    teachersContent.classList.add(\"teachers-content\");\r\n    scheduleWrapper.appendChild(teachersContent);\r\n    leacherSchedule.forEach((week) => {\r\n      weekCounter++;\r\n      let weekName = week[0];\r\n      let weekContent = week[1];\r\n      let weekBlock = document.createElement(\"div\");\r\n      weekBlock.classList.add(\r\n        \"schedule-block-body__week\",\r\n        \"schedule-block-body__week-\" + weekCounter\r\n      );\r\n      weekBlock.id = weekName;\r\n      teachersContent.appendChild(weekBlock);\r\n      // create week title\r\n      let weekTitle = document.createElement(\"p\");\r\n      weekTitle.classList.add(\"week__title\");\r\n      weekTitle.innerText = weekName;\r\n      weekBlock.appendChild(weekTitle);\r\n      // add week content\r\n      let weekInner = document.createElement(\"div\");\r\n      weekInner.classList.add(\"week__content\");\r\n      weekBlock.appendChild(weekInner);\r\n      dayCounter = 0;\r\n      weekContent.forEach((day) => {\r\n        dayCounter++;\r\n        let dayName = day[0];\r\n        let dayContent = day[1];\r\n        let dayBlock = document.createElement(\"div\");\r\n        dayBlock.classList.add(\"day\");\r\n        dayBlock.setAttribute(\"id\", \"day-\" + dayCounter);\r\n        weekInner.appendChild(dayBlock);\r\n        // create day title\r\n        let dayTitle = document.createElement(\"h2\");\r\n        dayTitle.classList.add(\"day__title\");\r\n        dayTitle.innerHTML = dayName;\r\n        dayBlock.appendChild(dayTitle);\r\n        // create day content\r\n        pairCounter = 0;\r\n        dayContent.forEach((lesson) => {\r\n          let dayLesson = document.createElement(\"div\");\r\n          pairCounter = pairCounter + 1;\r\n          dayLesson.classList.add(\"day__lesson\", \"lesson-\" + pairCounter);\r\n          dayBlock.appendChild(dayLesson);\r\n          let removedGroup = lesson.splice(5, 1);\r\n          lesson.splice(2, 1, removedGroup);\r\n          lesson.forEach((lessonItem) => {\r\n            let lessonInner = document.createElement(\"div\");\r\n            lessonInner.classList.add(\"lesson__item\");\r\n            if (lessonItem == \"\") {\r\n              lessonItem = \" \";\r\n            }\r\n            lessonInner.innerText = lessonItem;\r\n            dayLesson.appendChild(lessonInner);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n  //create bell schedule\r\n  function createBellSchedule() {\r\n    // reset all\r\n    let scheduleBell = document.querySelector(\".bell-schedule-content\");\r\n    if (scheduleBell) {\r\n      let scheduleBellItems = scheduleBell.querySelectorAll(\r\n        \".bell-schedule-content__row\"\r\n      );\r\n      if (scheduleBellItems) {\r\n        scheduleBellItems.forEach((item) => {\r\n          item.remove();\r\n        });\r\n      }\r\n    }\r\n    // create\r\n    if (scheduleBell) {\r\n      scheduleBells.forEach(function (item, i) {\r\n        let scheduleBellItem = document.createElement(\"div\");\r\n        scheduleBellItem.classList.add(\"bell-schedule-content__row\");\r\n        let scheduleBellItemNum = document.createElement(\"p\");\r\n        scheduleBellItemNum.classList.add(\"bell-schedule-content__row-number\");\r\n        scheduleBellItemNum.innerText = i + 1;\r\n        let scheduleBellItemPair = document.createElement(\"p\");\r\n        scheduleBellItemPair.classList.add(\"bell-schedule-content__row-pair\");\r\n        scheduleBellItemPair.innerText = item;\r\n        scheduleBellItem.appendChild(scheduleBellItemNum);\r\n        scheduleBellItem.appendChild(scheduleBellItemPair);\r\n        scheduleBell.appendChild(scheduleBellItem);\r\n      });\r\n    }\r\n  }\r\n  // geting current week\r\n  function getCurrWeek() {\r\n    var todayNumber = new Date().getTime();\r\n    //604 800 000 milisec in week\r\n    //604 625 200 milisec in week without weekends\r\n    // 86 400 000 milisec in day\r\n    // 172 800 000 milisec in weekends\r\n    var dates = _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__.weeksDates.map(function (valueOf) {\r\n      return new Date(valueOf).getTime();\r\n    });\r\n    dates.forEach((e, index) =>\r\n      addElement(e, todayNumber, index + 1, _modules_timeManagement_js__WEBPACK_IMPORTED_MODULE_3__.weeks)\r\n    );\r\n    function addElement(date, todayNumber, week, weeks) {\r\n      let currWeek;\r\n      let currWeekName = document.querySelector(\".schedule-block-header__week\");\r\n      // f = weeks[week];\r\n      if ((todayNumber - date < 432000000) & (todayNumber - date > 0)) {\r\n        currWeek = weeks[week];\r\n        currWeekName.innerText = \"Тиждень: \" + weeks[week];\r\n      } else if (\r\n        (todayNumber - date < 604800000) &\r\n        (todayNumber - date > 432000000)\r\n      ) {\r\n        currWeek = weeks[week + 1];\r\n        currWeekName.innerText = \"Наступний тиждень: \" + weeks[week + 1];\r\n      }\r\n      if (currWeek !== null && currWeek !== undefined && currWeek !== \"\") {\r\n        //remove all current classes\r\n        let weeksCurr = document.querySelectorAll(\"current-week\");\r\n        if (weeksCurr) {\r\n          weeksCurr.forEach(function (item) {\r\n            item.classList.remove(\"current-week\");\r\n          });\r\n        }\r\n        // add class to curr week\r\n        let currWeekClass = document.getElementById(currWeek + \"-тиждень\");\r\n        let alwaysWeek = document.getElementById(\"завжди\");\r\n\r\n        if (currWeekClass) {\r\n          currWeekExist = true;\r\n          currWeekClass.classList.add(\"current-week\");\r\n          getCurrDay(currWeekClass);\r\n          updateDayInterval = setInterval(getCurrDay, 30000, currWeekClass);\r\n        } else if (alwaysWeek) {\r\n          currWeekExist = true;\r\n          alwaysWeek.classList.add(\"current-week\");\r\n          updateDayInterval = setInterval(getCurrDay, 30000, alwaysWeek);\r\n          getCurrDay(alwaysWeek);\r\n        } else currWeekExist = false;\r\n      }\r\n    }\r\n  }\r\n  //getting current day\r\n  function getCurrDay(currWeek) {\r\n    let days = [\r\n      \"Неділя\",\r\n      \"Понеділок\",\r\n      \"Вівторок\",\r\n      \"Середа\",\r\n      \"Четвер\",\r\n      \"П'ятниця\",\r\n      \"Субота\",\r\n    ];\r\n    let date = new Date();\r\n    let n = date.getDay();\r\n    let currDayName = document.querySelector(\".schedule-block-header__day\");\r\n    let dayActive;\r\n    let today = true;\r\n    if (n == 6) {\r\n      currDayName.innerText = \"Сьогодні: \" + days[n];\r\n    } else if (n == 0) {\r\n      currDayName.innerText = \"Сьогодні: \" + days[n];\r\n    } else {\r\n      if (location.hash !== \"#extraclasses\") {\r\n        if (date.getHours() >= 15 && date.getHours() <= 24) {\r\n          currDayName.innerText = \"Завтра: \" + days[n + 1];\r\n          dayActive = n + 1;\r\n          today = false;\r\n        } else {\r\n          currDayName.innerText = \"Сьогодні: \" + days[n];\r\n          dayActive = n;\r\n        }\r\n      } else if (location.hash == \"#extraclasses\") {\r\n        if (date.getHours() >= 21 && date.getHours() <= 24) {\r\n          currDayName.innerText = \"Завтра: \" + days[n + 1];\r\n          dayActive = n + 1;\r\n          today = false;\r\n        } else {\r\n          currDayName.innerText = \"Сьогодні: \" + days[n];\r\n          dayActive = n;\r\n        }\r\n      }\r\n\r\n      let daysCurr = document.querySelectorAll(\".day-active\");\r\n      let daysNext = document.querySelectorAll(\".next-day\");\r\n      if (daysCurr) {\r\n        daysCurr.forEach(function (item) {\r\n          item.classList.remove(\"day-active\");\r\n        });\r\n      } else if (daysNext) {\r\n        daysCurr.forEach(function (item) {\r\n          item.classList.remove(\"next-day\");\r\n        });\r\n      }\r\n\r\n      //color current day\r\n      if (dayActive == 0 || dayActive == 6) {\r\n      } else {\r\n        if (today == true) {\r\n          var currDayWrapper = currWeek.querySelector(\".week__content\");\r\n          var currDay = currDayWrapper.querySelector(\"#day-\" + dayActive);\r\n          currDay.classList.add(\"current-day\");\r\n        } else if (today == false) {\r\n          var currDayWrapper = currWeek.querySelector(\".week__content\");\r\n          var currDay = currDayWrapper.querySelector(\"#day-\" + dayActive);\r\n          currDay.classList.add(\"next-day\");\r\n        }\r\n      }\r\n    }\r\n    if (!dayActive == 0 || !dayActive == 6) {\r\n      if (!n == 0 || !n == 6) {\r\n        if (location.hash !== \"#extraclasses\") {\r\n          getCurrLesson(currDay);\r\n        } else if (location.hash == \"#extraclasses\") {\r\n          colorCurrentExtraLesson(currDay);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //getting current lesson\r\n  function getCurrLesson(currDay) {\r\n    let currPairs = document.querySelectorAll(\".current-pair\");\r\n    currPairs.forEach(function (item, i, arr) {\r\n      item.classList.remove(\"current-pair\");\r\n    });\r\n    let day = [\"08:00-16:00\"];\r\n    var currTime = new Date();\r\n    day.forEach((item) => {\r\n      let day = item.split(\"-\");\r\n      let s = day[0].split(\":\");\r\n      let startDay = new Date(\r\n        currTime.getFullYear(),\r\n        currTime.getMonth(),\r\n        currTime.getDate(),\r\n        parseInt(s[0]),\r\n        parseInt(s[1])\r\n      );\r\n      let e = day[1].split(\":\");\r\n      let endDay = new Date(\r\n        currTime.getFullYear(),\r\n        currTime.getMonth(),\r\n        currTime.getDate(),\r\n        parseInt(e[0]),\r\n        parseInt(e[1])\r\n      );\r\n      if (currTime >= startDay && currTime < endDay) {\r\n        scheduleBells.forEach(function (item, i) {\r\n          let lesson = item.split(\"-\");\r\n          let s = lesson[0].split(\":\");\r\n          let startTime = new Date(\r\n            currTime.getFullYear(),\r\n            currTime.getMonth(),\r\n            currTime.getDate(),\r\n            parseInt(s[0]),\r\n            parseInt(s[1])\r\n          );\r\n          let e = lesson[1].split(\":\");\r\n          let endTime = new Date(\r\n            currTime.getFullYear(),\r\n            currTime.getMonth(),\r\n            currTime.getDate(),\r\n            parseInt(e[0]),\r\n            parseInt(e[1])\r\n          );\r\n          if (currTime >= startTime && currTime <= endTime) {\r\n            let currPair = currDay.querySelector(\".lesson-\" + (i + 1));\r\n            currPair.classList.add(\"current-pair\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  //finding and showing curr week\r\n  function showCurrWeek() {\r\n    let weekArr = document.querySelectorAll(\".schedule-block-body__week\");\r\n    weekArr.forEach(function (item) {\r\n      if (\r\n        item.classList.contains(\"current-week\") &&\r\n        item.classList.contains(\"week__d-none\")\r\n      ) {\r\n        item.classList.remove(\"week__d-none\");\r\n      }\r\n      if (!item.classList.contains(\"current-week\")) {\r\n        item.classList.add(\"week__d-none\");\r\n      }\r\n    });\r\n  }\r\n  //show all weeks\r\n  function showAllWeeks() {\r\n    let weekArr = document.querySelectorAll(\".schedule-block-body__week\");\r\n    weekArr.forEach(function (item) {\r\n      if (item.classList.contains(\"week__d-none\")) {\r\n        item.classList.remove(\"week__d-none\");\r\n      }\r\n    });\r\n  }\r\n  //create functions for group button\r\n  // кнопка вибору групи\r\n  function groupBtn() {\r\n    let groupDrop = document.querySelector(\".dropdown-group\");\r\n    if (groupDrop) {\r\n      // reset menu\r\n      let groupDropList = groupDrop.querySelector(\".dropdown__list\");\r\n      if (groupDropList) {\r\n        groupDropList.querySelectorAll(\"li\").forEach((item) => {\r\n          item.remove();\r\n        });\r\n      }\r\n      // getting groups and pushing them into menu\r\n      groupsList.forEach((groupListItem) => {\r\n        let dropdownItem = document.createElement(\"li\");\r\n        dropdownItem.classList.add(\r\n          \"dropdown__list-item\",\r\n          \"dropdown-group__item\"\r\n        );\r\n        dropdownItem.innerText = groupListItem;\r\n        document\r\n          .querySelector(\".dropdown-list__groups\")\r\n          .appendChild(dropdownItem);\r\n      });\r\n      let groupDropBtn = groupDrop.querySelector(\".dropdown__button\");\r\n      let groupDropListItems = groupDropList.querySelectorAll(\r\n        \".dropdown__list-item\"\r\n      );\r\n      // open/close dropdown when click on button\r\n      groupDropBtn.addEventListener(\"click\", function () {\r\n        groupDropList.classList.add(\"dropdown__list--visible\");\r\n        this.classList.add(\"dropdown__button--active\");\r\n      });\r\n\r\n      //choose elem\r\n      groupDropListItems.forEach(function (listItem) {\r\n        listItem.addEventListener(\"click\", function () {\r\n          groupDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n            this.innerText;\r\n          groupDropList.classList.remove(\"dropdown__list--visible\");\r\n          currentGroup = this.innerText;\r\n          // отримання актуальних збережень\r\n          let savePageOptions = JSON.parse(\r\n            localStorage.getItem(\"savePageOptions\")\r\n          );\r\n          let saveChoosedOptions = JSON.parse(\r\n            localStorage.getItem(\"saveChoosedOptions\")\r\n          );\r\n          // перевірка чи ввімкнено авто збереження\r\n          if (savePageOptions.studentsPageSave == true) {\r\n            // якщо ввімкнено то зберігати кожен вибір на сторінці\r\n            saveChoosedOptions.studentsPageSave = currentGroup;\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(saveChoosedOptions)\r\n            );\r\n          }\r\n          if (scheduleTogglerCondition == false) {\r\n            resetInterval(updateDayInterval);\r\n            findGroup();\r\n            loadSchedule();\r\n            getCurrWeek();\r\n            showCurrWeek();\r\n          } else {\r\n            resetInterval(updateDayInterval);\r\n            findGroup();\r\n            loadSchedule();\r\n            getCurrWeek();\r\n            createWeekButton();\r\n          }\r\n        });\r\n      });\r\n\r\n      // close dropdown when click beyond the button\r\n      document.addEventListener(\"click\", function (e) {\r\n        if (\r\n          e.target !== groupDropBtn &&\r\n          e.target !== groupDropBtn.querySelector(\".dropdown__button-img\") &&\r\n          e.target !== groupDropBtn.querySelector(\".dropdown__button-text\")\r\n        ) {\r\n          groupDropBtn.classList.remove(\"dropdown__button--active\");\r\n          groupDropList.classList.remove(\"dropdown__list--visible\");\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // finding week\r\n  function findWeek() {\r\n    let weekArr = document.querySelectorAll(\".schedule-block-body__week\");\r\n    weekArr.forEach(function (item) {\r\n      item.classList.remove(\"week__active\");\r\n      item.classList.add(\"week__d-none\");\r\n    });\r\n    let currWeek = document.getElementById(choosedWeek);\r\n    if (currWeek) {\r\n      currWeek.classList.remove(\"week__d-none\");\r\n      currWeek.classList.add(\"week__active\");\r\n    }\r\n  }\r\n  //create week button\r\n  function createWeekButton() {\r\n    let weekBlock = document.querySelector(\".sidebar-nav__item-week\");\r\n    if (weekBlock) {\r\n      weekBlock.classList.add(\"visible\");\r\n    }\r\n    let dropdownWeek = document.querySelector(\".dropdown__block-week\");\r\n    dropdownWeek.classList.add(\"dropdown-week--visible\");\r\n    // reset data in button if have something\r\n    let weekDropBtn = dropdownWeek.querySelector(\".dropdown__button\");\r\n    weekDropBtn.querySelector(\".dropdown__button-text\").innerText = \"\";\r\n    let parent = document.querySelector(\".dropdown-list__week\");\r\n    let item = parent.querySelectorAll(\"li\");\r\n    if (item) {\r\n      item.forEach(function (item) {\r\n        item.remove();\r\n      });\r\n    }\r\n    //create new data in button\r\n    if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"students\") {\r\n      addGroupWeeksItems(parent);\r\n    } else if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"teachers\") {\r\n      addTeachersWeeksItems(parent);\r\n    } else if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"extraclasses\") {\r\n      addExtraClassesWeeksItems(parent, choosedExtraLessonArr);\r\n    }\r\n\r\n    // week button function\r\n    let weekDrop = document.querySelector(\".dropdown-week\");\r\n    weekDropBtn = weekDrop.querySelector(\".dropdown__button\");\r\n    let weekDropList = weekDrop.querySelector(\".dropdown__list\");\r\n    let weekDropListItems = weekDropList.querySelectorAll(\r\n      \".dropdown__list-item\"\r\n    );\r\n    // open/close dropdown when click on button\r\n    weekDropBtn.addEventListener(\"click\", function () {\r\n      weekDropList.classList.add(\"dropdown__list--visible\");\r\n      this.classList.add(\"dropdown__button--active\");\r\n    });\r\n\r\n    //choose elem\r\n    weekDropListItems.forEach(function (listItem) {\r\n      listItem.addEventListener(\"click\", function () {\r\n        choosedWeek = this.innerText;\r\n        weekDropBtn.querySelector(\".dropdown__button-text\").innerText =\r\n          choosedWeek;\r\n        weekDropList.classList.remove(\"dropdown__list--visible\");\r\n        findWeek();\r\n      });\r\n    });\r\n\r\n    // close dropdown when click beyond the button\r\n    document.addEventListener(\"click\", function (e) {\r\n      if (\r\n        e.target !== weekDropBtn &&\r\n        e.target !== weekDropBtn.querySelector(\".dropdown__button-img\") &&\r\n        e.target !== weekDropBtn.querySelector(\".dropdown__button-text\")\r\n      ) {\r\n        weekDropBtn.classList.remove(\"dropdown__button--active\");\r\n        weekDropList.classList.remove(\"dropdown__list--visible\");\r\n      }\r\n    });\r\n  }\r\n  //finding group\r\n  function findGroup() {\r\n    scheduleArr.forEach(function (item, i, arr) {\r\n      if (item[0].includes(currentGroup)) {\r\n        currentGroupColumn = i;\r\n      }\r\n    });\r\n  }\r\n  // load schedule\r\n  function loadSchedule() {\r\n    resetSchedule();\r\n    let groupData = scheduleArr[currentGroupColumn];\r\n    let wrapper = document.createElement(\"div\");\r\n    wrapper.classList.add(\"schedule__wrapper\");\r\n    let scheduleWrapper = document\r\n      .getElementById(\"schedule-block-body\")\r\n      .appendChild(wrapper);\r\n    //set group name\r\n\r\n    if (!groupData[0] == \"\") {\r\n      let group = groupData[0];\r\n      let groupBlock = document.createElement(\"div\");\r\n      groupBlock.id = group;\r\n      groupBlock.classList.add(\"group\");\r\n      scheduleWrapper.appendChild(groupBlock);\r\n      let groupHeader = document.querySelector(\".schedule-block-header__group\");\r\n      groupHeader.classList.remove(\"hidden\");\r\n      document.querySelector(\".schedule-block-header__group-text\").innerHTML =\r\n        group;\r\n      createWeek(groupBlock);\r\n    }\r\n\r\n    // create weeks\r\n    function createWeek(groupBlock) {\r\n      groupData[1].forEach((week) => {\r\n        let weekName = week[0];\r\n        let weekContent = week[1];\r\n        weekCounter++;\r\n        let weekBlock = document.createElement(\"div\");\r\n        weekBlock.classList.add(\r\n          \"schedule-block-body__week\",\r\n          \"schedule-block-body__week-\" + weekCounter\r\n        );\r\n\r\n        let weekTitle = document.createElement(\"p\");\r\n        weekTitle.classList.add(\"week__title\");\r\n        weekTitle.innerHTML = weekName;\r\n        weekBlock.id = weekName;\r\n        weekBlock.appendChild(weekTitle);\r\n        let weekContentBlock = document.createElement(\"div\");\r\n        weekContentBlock.classList.add(\"week__content\");\r\n        weekBlock.appendChild(weekContentBlock);\r\n        groupBlock.appendChild(weekBlock);\r\n        createDay(weekContentBlock, weekContent);\r\n      });\r\n    }\r\n\r\n    function createDay(weekContent, weekArr) {\r\n      dayCounter = 0;\r\n      weekArr.forEach((day) => {\r\n        let dayBlock = document.createElement(\"div\");\r\n        dayBlock.classList.add(\"day\");\r\n        dayCounter++;\r\n        dayBlock.setAttribute(\"id\", \"day-\" + dayCounter);\r\n        let dayName = day[0];\r\n        let dayContent = day[1];\r\n        let dayNameTitle = document.createElement(\"h2\");\r\n        dayNameTitle.classList.add(\"day__title\");\r\n        dayNameTitle.innerHTML = dayName;\r\n        dayBlock.appendChild(dayNameTitle);\r\n        weekContent.appendChild(dayBlock);\r\n\r\n        /////////////////////////////////////////////////////////////////////////////////////\r\n        createLesson(dayBlock, dayContent);\r\n\r\n        function createLesson(day, dayArr) {\r\n          pairCounter = 0;\r\n          dayArr.forEach((pair) => {\r\n            let pairBlock = document.createElement(\"div\");\r\n            pairCounter = pairCounter + 1;\r\n            pairBlock.classList.add(\"pair\", \"lesson-\" + pairCounter);\r\n            if (pair.length > 0) {\r\n              pair.forEach((lesson) => {\r\n                let lessonRow = document.createElement(\"div\");\r\n                lessonRow.classList.add(\"lesson__row\", \"row-lesson\");\r\n                lesson.forEach(function (item, i, arr) {\r\n                  let lesson = document.createElement(\"div\");\r\n                  lesson.classList.add(\"row-lesson__item\");\r\n                  if (item == \"\") {\r\n                    item = \"&nbsp\";\r\n                  }\r\n                  lesson.innerHTML = item;\r\n                  lessonRow.appendChild(lesson);\r\n                  pairBlock.appendChild(lessonRow);\r\n                  day.appendChild(pairBlock);\r\n                });\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // show choosed chedule\r\n  function choosedSchedule() {\r\n    if (scheduleTogglerCondition == false) {\r\n      //reset all weeks are choosed by client\r\n      let weekActive = document.querySelectorAll(\".week__active\");\r\n      if (weekActive) {\r\n        weekActive.forEach((item) => {\r\n          item.classList.remove(\"week__active\");\r\n        });\r\n      }\r\n      showCurrWeek();\r\n      // hide week button if have\r\n      let dropdownWeek = document.querySelector(\".dropdown__block-week\");\r\n      if (dropdownWeek) {\r\n        dropdownWeek.classList.remove(\"dropdown-week--visible\");\r\n      }\r\n      let weekBlock = document.querySelector(\".sidebar-nav__item-week\");\r\n      if (weekBlock) {\r\n        weekBlock.classList.remove(\"visible\");\r\n      }\r\n      if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"extraclasses\") {\r\n        if (currWeekExist) {\r\n          showCurrWeek();\r\n        } else {\r\n          console.log(\"Поточний тиждень не знайдено\");\r\n        }\r\n      }\r\n    } else if (scheduleTogglerCondition == true) {\r\n      showAllWeeks();\r\n      if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"students\") {\r\n        let groupInnerText = document.querySelector(\r\n          \".dropdown-group__button-text\"\r\n        );\r\n        if (groupInnerText) {\r\n          if (!groupInnerText.innerText == \"\") {\r\n            createWeekButton();\r\n          }\r\n        }\r\n      } else if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"teachers\") {\r\n        let teachersInnerText = document.querySelector(\r\n          \".dropdown-teacher__button-text\"\r\n        );\r\n        if (teachersInnerText) {\r\n          if (!teachersInnerText.innerText == \"\") {\r\n            createWeekButton();\r\n          }\r\n        }\r\n      } else if (_modules_navigation_js__WEBPACK_IMPORTED_MODULE_6__.currentPage == \"extraclasses\") {\r\n        let teachersInnerText = document.querySelector(\r\n          \".dropdown-extraclasses__button-text\"\r\n        );\r\n        if (teachersInnerText) {\r\n          if (!teachersInnerText.innerText == \"\") {\r\n            if (choosedExtraLessonArr[1].length == 1) {\r\n              showAllWeeks();\r\n            } else {\r\n              showAllWeeks();\r\n              createWeekButton();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //toggler's functions\r\n  function togglerFunc() {\r\n    const toggler = document.querySelectorAll(\".toggler\");\r\n    // check toggler condition\r\n    for (let i = 0; i < toggler.length; i++) {\r\n      var togglerBtn = toggler[i].querySelector(\".toggler__button\");\r\n      var togglerLeft = toggler[i].querySelector(\".toggler__text-left\");\r\n      var togglerFlag = toggler[i].querySelector(\".toggle\");\r\n      var togglerRight = toggler[i].querySelector(\".toggler__text-right\");\r\n      if (scheduleTogglerCondition) {\r\n        togglerFlag.checked = true;\r\n        togglerBtn.classList.add(\"toggler__button-active\");\r\n        if (togglerLeft && togglerRight) {\r\n          togglerLeft.style.color = \"rgba(1, 7, 13, 0.4)\";\r\n          togglerRight.style.color = \"#000000\";\r\n        }\r\n      } else {\r\n        togglerFlag.checked = false;\r\n        togglerBtn.classList.remove(\"toggler__button-active\");\r\n        if (togglerLeft && togglerRight) {\r\n          togglerLeft.style.color = \"#000000\";\r\n          togglerRight.style.color = \"rgba(1, 7, 13, 0.4)\";\r\n        }\r\n      }\r\n      toggler[i].addEventListener(\"click\", function () {\r\n        var togglerButton = toggler[i].querySelector(\".toggler__button\");\r\n        var togglerCheck = toggler[i].querySelector(\".toggle\");\r\n        var togglerLeftText = toggler[i].querySelector(\".toggler__text-left\");\r\n        var togglerRightText = toggler[i].querySelector(\".toggler__text-right\");\r\n        if (togglerButton) {\r\n          if (togglerCheck.checked) {\r\n            // перевірка чи тоглер для розкладу\r\n            if (toggler[i].classList.contains(\"change-schedule-toggler\")) {\r\n              scheduleTogglerCondition = true;\r\n            }\r\n            togglerButton.classList.add(\"toggler__button-active\");\r\n            if (togglerLeftText && togglerRightText) {\r\n              togglerLeftText.style.color = \"rgba(1, 7, 13, 0.4)\";\r\n              togglerRightText.style.color = \"#000000\";\r\n            } else {\r\n              return;\r\n            }\r\n          } else if (!togglerCheck.checked) {\r\n            // перевірка чи тоглер для розкладу\r\n            if (toggler[i].classList.contains(\"change-schedule-toggler\")) {\r\n              scheduleTogglerCondition = false;\r\n            }\r\n            togglerButton.classList.remove(\"toggler__button-active\");\r\n            if (togglerLeftText && togglerRightText) {\r\n              togglerLeftText.style.color = \"#000000\";\r\n              togglerRightText.style.color = \"rgba(1, 7, 13, 0.4)\";\r\n            } else {\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        choosedSchedule();\r\n        // отримання значення тоглера в формі зворотнього звязку\r\n        // let popupToggler = document.querySelector(\".message-form-wrapper\");\r\n        // if (!popupToggler.classList.contains(\"d-none\")) {\r\n        // } else {\r\n        // choosedSchedule();\r\n        // }\r\n      });\r\n    }\r\n  }\r\n  // crete groups weeks\r\n  function addGroupWeeksItems(parent) {\r\n    let scheduleArrContent = scheduleArr[currentGroupColumn][1];\r\n    scheduleArrContent.forEach(function (week, i) {\r\n      let weekName = week[0];\r\n      let dropdownListItem = document.createElement(\"li\");\r\n      dropdownListItem.classList.add(\r\n        \"dropdown__list-item\",\r\n        \"dropdown-week__item\"\r\n      );\r\n      dropdownListItem.innerText = weekName;\r\n      parent.appendChild(dropdownListItem);\r\n    });\r\n  }\r\n  // crete teachers weeks\r\n  function addTeachersWeeksItems(parent) {\r\n    let weeksArr = [];\r\n    compliedSchedule.forEach((week) => {\r\n      weeksArr.push(week[0]);\r\n    });\r\n    weeksArr = new Set(weeksArr);\r\n    weeksArr.forEach((weekName) => {\r\n      let dropdownListItem = document.createElement(\"li\");\r\n      dropdownListItem.classList.add(\r\n        \"dropdown__list-item\",\r\n        \"dropdown-week__item\"\r\n      );\r\n      dropdownListItem.innerText = weekName;\r\n      parent.appendChild(dropdownListItem);\r\n    });\r\n  }\r\n  function addExtraClassesWeeksItems(parent, choosedClassesArr) {\r\n    let weeksArr = [];\r\n    choosedClassesArr[1].forEach((week) => {\r\n      weeksArr.push(week[0]);\r\n      if (week[0] == \"завжди\") {\r\n        weekAlways = week[0];\r\n      }\r\n    });\r\n    weeksArr = new Set(weeksArr);\r\n    weeksArr.forEach((weekName) => {\r\n      let dropdownListItem = document.createElement(\"li\");\r\n      dropdownListItem.classList.add(\r\n        \"dropdown__list-item\",\r\n        \"dropdown-week__item\"\r\n      );\r\n      dropdownListItem.innerText = weekName;\r\n      parent.appendChild(dropdownListItem);\r\n    });\r\n  }\r\n  // create group list\r\n  function createGroupsList() {\r\n    scheduleArr.forEach((group) => {\r\n      let groupName = group[0];\r\n      if (groupName !== \"\") {\r\n        groupsList.push(groupName);\r\n      }\r\n    });\r\n  }\r\n  //reset schedule\r\n  function resetSchedule() {\r\n    let groupHeader = document.querySelector(\".schedule-block-header__group\");\r\n    if (groupHeader) {\r\n      groupHeader.classList.add(\"hidden\");\r\n    }\r\n    weekCounter = 0;\r\n    let weekNames = document.querySelectorAll(\r\n      \".schedule-block-header__week-item\"\r\n    );\r\n    weekNames.forEach(function (item, i, arr) {\r\n      item.remove();\r\n    });\r\n    let elem = document.querySelector(\".schedule__wrapper\");\r\n    if (elem) {\r\n      elem.remove();\r\n    }\r\n  }\r\n  function resetTeachersGropBtn() {\r\n    let teacherGroupBtnBlock = document.querySelector(\".dropdown__block-group\");\r\n    let teacherGroupDrop =\r\n      teacherGroupBtnBlock.querySelector(\".dropdown-group\");\r\n    let teacherGroupDropBtn =\r\n      teacherGroupDrop.querySelector(\".dropdown__button\");\r\n    teacherGroupDropBtn.querySelector(\".dropdown__button-text\").innerText = \"\";\r\n  }\r\n  // close/open popup\r\n  function resetInterval(interval) {\r\n    clearInterval(interval);\r\n  }\r\n\r\n  // clone arr\r\n  function arrayClone(arr) {\r\n    var i, copy;\r\n\r\n    if (Array.isArray(arr)) {\r\n      copy = arr.slice(0);\r\n      for (i = 0; i < copy.length; i++) {\r\n        copy[i] = arrayClone(copy[i]);\r\n      }\r\n      return copy;\r\n    } else if (typeof arr === \"object\") {\r\n      throw \"Cannot clone array containing an object!\";\r\n    } else {\r\n      return arr;\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/app.js?");

/***/ }),

/***/ "./src/js/modules/burger.js":
/*!**********************************!*\
  !*** ./src/js/modules/burger.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"burgerButton\": () => (/* binding */ burgerButton)\n/* harmony export */ });\nfunction burgerButton() {\r\n  let burger = document.querySelector(\".header__burger\");\r\n  let mobileMenu = document.querySelector(\".menu-header\");\r\n  let mobileMenuItems = mobileMenu.querySelectorAll(\".menu-header__button\");\r\n\r\n  burger.addEventListener(\"click\", function () {\r\n    if (!mobileMenu.classList.contains(\"nav-header-open\")) {\r\n      mobileMenu.classList.add(\"nav-header-open\");\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      mobileMenu.classList.remove(\"nav-header-open\");\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n  });\r\n\r\n  document.addEventListener(\"click\", function (e) {\r\n    if (\r\n      e.target !== mobileMenu &&\r\n      e.target !== burger &&\r\n      !e.target.classList.contains(\"header__burger-line\")\r\n    ) {\r\n      mobileMenu.classList.remove(\"nav-header-open\");\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n  });\r\n\r\n  mobileMenuItems.forEach((item) => {\r\n    item.addEventListener(\"click\", function () {\r\n      if (mobileMenu.classList.contains(\"nav-header-open\")) {\r\n        mobileMenu.classList.remove(\"nav-header-open\");\r\n        document.body.style.overflow = \"auto\";\r\n      }\r\n    });\r\n  });\r\n\r\n  // window resize\r\n  window.addEventListener(\"resize\", function () {\r\n    let screenWidth = window.screen.width;\r\n    if (screenWidth > 640 && mobileMenu.classList.contains(\"nav-header-open\")) {\r\n      mobileMenu.classList.remove(\"nav-header-open\");\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n  });\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/burger.js?");

/***/ }),

/***/ "./src/js/modules/change-theme.js":
/*!****************************************!*\
  !*** ./src/js/modules/change-theme.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"themeChanger\": () => (/* binding */ themeChanger)\n/* harmony export */ });\nfunction themeChanger() {\r\n  windowLoad();\r\n\r\n  function windowLoad() {\r\n    const htmlBlock = document.documentElement;\r\n    const saveUserTheme = localStorage.getItem(\"user-theme\");\r\n\r\n    // system defaul theme\r\n    let systemTheme;\r\n    if (window.matchMedia) {\r\n      systemTheme = window.matchMedia(\"(prefers-color-theme: dark)\").matches\r\n        ? \"dark\"\r\n        : \"light\";\r\n    }\r\n    window\r\n      .matchMedia(\"(prefers-color-theme: dark)\")\r\n      .addEventListener(\"change\", (e) => {\r\n        !saveUserTheme ? changeTheme() : null;\r\n      });\r\n\r\n    // change theme by click\r\n    let themeBtns = document.querySelectorAll(\".change-theme\");\r\n    if (themeBtns) {\r\n      themeBtns.forEach((themeBtn) => {\r\n        themeBtn.addEventListener(\"click\", function (e) {\r\n          changeTheme(true);\r\n        });\r\n      });\r\n    }\r\n\r\n    function setThemeClass() {\r\n      if (saveUserTheme) {\r\n        htmlBlock.classList.add(saveUserTheme);\r\n      } else htmlBlock.classList.add(systemTheme);\r\n    }\r\n\r\n    setThemeClass();\r\n\r\n    function changeTheme(saveTheme = false) {\r\n      let currTheme = htmlBlock.classList.contains(\"light\") ? \"light\" : \"dark\";\r\n      let newTheme;\r\n\r\n      if (currTheme === \"light\") {\r\n        newTheme = \"dark\";\r\n      } else if (currTheme === \"dark\") {\r\n        newTheme = \"light\";\r\n      }\r\n      htmlBlock.classList.remove(currTheme);\r\n      htmlBlock.classList.add(newTheme);\r\n      saveTheme ? localStorage.setItem(\"user-theme\", newTheme) : null;\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/change-theme.js?");

/***/ }),

/***/ "./src/js/modules/developerFunctions.js":
/*!**********************************************!*\
  !*** ./src/js/modules/developerFunctions.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createElement\": () => (/* binding */ createElement)\n/* harmony export */ });\nfunction createElement(\r\n  type,\r\n  classes = [],\r\n  content = null,\r\n  parentClass = null\r\n) {\r\n  let element = document.createElement(`${type}`);\r\n  //додавання класів\r\n  if (classes) {\r\n    classes.forEach((itemClass) => {\r\n      element.classList.add(itemClass);\r\n    });\r\n  }\r\n  //додавання контенту\r\n  if (content) {\r\n    element.innerHTML = content;\r\n  }\r\n  //додавання елемента в батьківський елемент\r\n  if (parentClass) {\r\n    let parent = document.querySelector(`.${parentClass}`);\r\n    if (parent) {\r\n      parent.appendChild(element);\r\n    }\r\n  }\r\n  return element;\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/developerFunctions.js?");

/***/ }),

/***/ "./src/js/modules/holidays-popup.js":
/*!******************************************!*\
  !*** ./src/js/modules/holidays-popup.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"fillCalendar\": () => (/* binding */ fillCalendar),\n/* harmony export */   \"holidaysPopup\": () => (/* binding */ holidaysPopup)\n/* harmony export */ });\n/* harmony import */ var _informationPopup_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./informationPopup-controller.js */ \"./src/js/modules/informationPopup-controller.js\");\n\r\nlet DataFromBase;\r\nlet popup = document.querySelector(\".information-popup\");\r\nlet popupMain = popup.querySelector(\".information-popup-body__main\");\r\nlet popupWrapper = document.querySelector(\".information-popup-wrapper\");\r\nfunction holidaysPopup(isHolidays, dates) {\r\n  DataFromBase = dates;\r\n  //auto open popup\r\n  if (isHolidays) {\r\n    _informationPopup_controller_js__WEBPACK_IMPORTED_MODULE_0__.openPopup();\r\n    fillCalendar(DataFromBase);\r\n  }\r\n  // open popup when press the button\r\n  let openHolidayButton = document.querySelector(\".item-calendar\");\r\n  if (openHolidayButton) {\r\n    openHolidayButton.addEventListener(\"click\", function () {\r\n      _informationPopup_controller_js__WEBPACK_IMPORTED_MODULE_0__.openPopup();\r\n      fillCalendar(DataFromBase);\r\n    });\r\n  }\r\n}\r\n\r\nfunction fillCalendar(DataFromBase) {\r\n  // створення блоку з датами\r\n  createHolidaysItems(DataFromBase);\r\n  chronologyLine(DataFromBase);\r\n}\r\n\r\n// створення блоку з датами\r\nfunction createHolidaysItems(DataFromBase) {\r\n  // створення елементів попапу\r\n  // додавання заголовку\r\n  let holidaysPopupTitle = document.createElement(\"h3\");\r\n  holidaysPopupTitle.classList.add(\r\n    \"information-popup__text\",\r\n    \"holidays-information-popup__text\"\r\n  );\r\n  holidaysPopupTitle.innerText = \"Канікули\";\r\n  popupMain.appendChild(holidaysPopupTitle);\r\n  // створення блоку для контенту\r\n  let datesBlockBody = document.createElement(\"div\");\r\n  datesBlockBody.classList.add(\r\n    \"information-popup__content\",\r\n    \"information-content\",\r\n    \"holidays-information-content\"\r\n  );\r\n  popupMain.appendChild(datesBlockBody);\r\n  // створення лінії прогресу канікул\r\n  let popupHronologyLineWrapper = document.createElement(\"div\");\r\n  popupHronologyLineWrapper.classList.add(\r\n    \"information-popup__chronology\",\r\n    \"information-chronology\"\r\n  );\r\n  let popupHronologyLine = document.createElement(\"div\");\r\n  popupHronologyLine.classList.add(\"information-chronology__line\");\r\n  let holidayChronologyProggress = document.createElement(\"div\");\r\n  holidayChronologyProggress.classList.add(\"information-chronology-proggress\");\r\n  popupHronologyLine.appendChild(holidayChronologyProggress);\r\n  popupHronologyLineWrapper.appendChild(popupHronologyLine);\r\n  popupMain.appendChild(popupHronologyLineWrapper);\r\n\r\n  // .querySelector(\".holidays-chronology__line\");\r\n\r\n  // отримання даних для заповнення\r\n  let Holidays = DataFromBase.Vacations;\r\n  let Events = DataFromBase.Events;\r\n  // отримання батьківського блоку\r\n  // let datesBlockBody = document.querySelector(\".holidays-popup__content\");\r\n  Holidays.forEach((item) => {\r\n    // створення елементу\r\n    let datesBlockItem = document.createElement(\"div\");\r\n    datesBlockItem.classList.add(\r\n      \"information-content__item\",\r\n      \"information-content-item-holidays\"\r\n    );\r\n    let datesBlockItemText = document.createElement(\"p\");\r\n    datesBlockItemText.innerText = item[0] + \": \" + item[1];\r\n    datesBlockItem.appendChild(datesBlockItemText);\r\n    datesBlockBody.appendChild(datesBlockItem);\r\n  });\r\n}\r\n\r\nfunction chronologyLine(DataFromBase) {\r\n  let AcademicYear = DataFromBase.AcademicYear;\r\n  let AcademicYearSplited = AcademicYear.split(\"-\");\r\n  let AcademicYearSplitedFirst = AcademicYearSplited[0].split(\".\");\r\n  let AcademicYearSplitedSecond = AcademicYearSplited[1].split(\".\");\r\n  AcademicYear =\r\n    AcademicYearSplitedFirst[2] +\r\n    \"-\" +\r\n    AcademicYearSplitedFirst[1] +\r\n    \"-\" +\r\n    AcademicYearSplitedFirst[0] +\r\n    \"/\" +\r\n    AcademicYearSplitedSecond[2] +\r\n    \"-\" +\r\n    AcademicYearSplitedSecond[1] +\r\n    \"-\" +\r\n    AcademicYearSplitedSecond[0];\r\n\r\n  let holidays = DataFromBase.Vacations;\r\n  let year = AcademicYear.split(\"/\");\r\n  let AcademicYearBeginning = new Date(year[0]).getTime();\r\n  let AcademicYearEnding = new Date(year[1]).getTime();\r\n  let popupHronologyLine = document.querySelector(\r\n    \".information-chronology__line\"\r\n  );\r\n  if (Array.isArray(holidays)) {\r\n    holidays.forEach((holiday) => {\r\n      let SplitedHoliday = holiday[1].split(\"-\");\r\n      let SplitedHolidaySplited1 = SplitedHoliday[0].split(\".\");\r\n      let holdiayBeginningDate = [\r\n        SplitedHolidaySplited1[2] +\r\n          \"-\" +\r\n          SplitedHolidaySplited1[1] +\r\n          \"-\" +\r\n          SplitedHolidaySplited1[0],\r\n      ];\r\n      let SplitedHolidaySplited2 = SplitedHoliday[1].split(\".\");\r\n      let holdiayEndingDate = [\r\n        SplitedHolidaySplited2[2] +\r\n          \"-\" +\r\n          SplitedHolidaySplited2[1] +\r\n          \"-\" +\r\n          SplitedHolidaySplited2[0],\r\n      ];\r\n      let HolidayBeginning = new Date(holdiayBeginningDate).getTime();\r\n      let HolidayEnding = new Date(holdiayEndingDate).getTime();\r\n\r\n      let HolidayMiddle = (HolidayBeginning + HolidayEnding) / 2;\r\n      // count percent\r\n      let item = createHolidayChronologyItem(holiday[1], popupHronologyLine);\r\n      openChronologyItemInfo();\r\n\r\n      if (\r\n        HolidayMiddle >= AcademicYearBeginning &&\r\n        HolidayMiddle <= AcademicYearEnding\r\n      ) {\r\n        item.style.left =\r\n          (\r\n            ((HolidayMiddle - AcademicYearBeginning) /\r\n              (AcademicYearEnding - AcademicYearBeginning)) *\r\n            100\r\n          ).toFixed(2) + \"%\";\r\n      } else if (HolidayMiddle >= AcademicYearEnding) {\r\n        item.style.left = \"95%\";\r\n      } else if (HolidayMiddle <= AcademicYearBeginning) {\r\n        item.style.left = \"0%\";\r\n      }\r\n    });\r\n  }\r\n\r\n  function openChronologyItemInfo() {\r\n    let holidayButton = document.querySelectorAll(\r\n      \".information-chronology__item\"\r\n    );\r\n    let holidayButtonInfo = document.querySelectorAll(\r\n      \".information-chronology__item-info\"\r\n    );\r\n    holidayButton.forEach((item) => {\r\n      item.addEventListener(\"click\", () => {\r\n        //hide all opened info\r\n        holidayButtonInfo.forEach((infoItem) => {\r\n          infoItem.style.display = \"none\";\r\n        });\r\n        // open choosed info\r\n        item.querySelector(\".information-chronology__item-info\").style.display =\r\n          \"block\";\r\n        // close item click beyond it\r\n        document.addEventListener(\"click\", function (e) {\r\n          if (\r\n            e.target !==\r\n              item.querySelector(\".information-chronology__item-info\") &&\r\n            e.target !== item\r\n          ) {\r\n            item.querySelector(\r\n              \".information-chronology__item-info\"\r\n            ).style.display = \"none\";\r\n            item.querySelector(\r\n              \".information-chronology__item-info\"\r\n            ).style.transform = \"translatex(-50%)\";\r\n          }\r\n        });\r\n      });\r\n    });\r\n    holidayButton.forEach((button) => {\r\n      button.onclick = () => {\r\n        button.querySelector(\r\n          \".information-chronology__item-info\"\r\n        ).style.transform = \"translatex(-50%)\";\r\n        placeItemsInBorder(button);\r\n      };\r\n    });\r\n  }\r\n\r\n  // заповнення лінії прогресу навчального року\r\n  let currDate = new Date().getTime();\r\n  let chronologyProgress = document.querySelector(\r\n    \".information-chronology-proggress\"\r\n  );\r\n  if (currDate >= AcademicYearBeginning && currDate <= AcademicYearEnding) {\r\n    chronologyProgress.style.width =\r\n      (\r\n        ((currDate - AcademicYearBeginning) /\r\n          (AcademicYearEnding - AcademicYearBeginning)) *\r\n        100\r\n      ).toFixed(2) + \"%\";\r\n  }\r\n}\r\nfunction createHolidayChronologyItem(dateOfHolidays, parent) {\r\n  let item = document.createElement(\"div\");\r\n  item.classList.add(\"information-chronology__item\");\r\n  parent.appendChild(item);\r\n  let itemInfo = document.createElement(\"div\");\r\n  itemInfo.classList.add(\"information-chronology__item-info\");\r\n  itemInfo.innerText = dateOfHolidays;\r\n  item.appendChild(itemInfo);\r\n  return item;\r\n}\r\nfunction placeItemsInBorder(item) {\r\n  let screenWedth = window.innerWidth;\r\n  let thisButtonInfo = item.querySelector(\".information-chronology__item-info\");\r\n  let elementWidth = thisButtonInfo.getBoundingClientRect().width;\r\n  let elementXPosition = thisButtonInfo.getBoundingClientRect().x;\r\n  if (elementXPosition - 10 < 0) {\r\n    let currTranslateX = elementWidth * 0.5 * -1;\r\n    let needTranlateX = elementXPosition - 10 * -1;\r\n    let translateX = currTranslateX + needTranlateX;\r\n    thisButtonInfo.style.transform = \"translateX(\" + translateX + \"px)\";\r\n  } else if (elementWidth + elementXPosition + 15 > screenWedth) {\r\n    let currTranslateX = elementWidth * 0.5 * -1;\r\n    let needTranlateX =\r\n      (elementXPosition + 10 + elementWidth - screenWedth) * -1;\r\n    let translateX = currTranslateX + needTranlateX;\r\n\r\n    thisButtonInfo.style.transform = \"translateX(\" + translateX + \"px)\";\r\n  }\r\n}\r\n// // видалення створених елементів\r\n// function resetItems() {\r\n//   // видалення заголовку\r\n//   let holidaysPopupTitle = popup.querySelector(\".holidays-popup__text\");\r\n//   if (holidaysPopupTitle) {\r\n//     holidaysPopupTitle.innerText = \"\";\r\n//   }\r\n//   // видалення елементів з хронології канікул та святкових днів\r\n//   let chronologyItem = document.querySelectorAll(\".holidays-chronology__item\");\r\n//   if (chronologyItem) {\r\n//     chronologyItem.forEach((item) => {\r\n//       item.remove();\r\n//     });\r\n//   }\r\n\r\n//   // видалення елементів з блоку з датами\r\n//   let datesBlockItem = document.querySelectorAll(\".holidays-content__item\");\r\n//   if (datesBlockItem) {\r\n//     datesBlockItem.forEach((item) => {\r\n//       item.remove();\r\n//     });\r\n//   }\r\n// }\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/holidays-popup.js?");

/***/ }),

/***/ "./src/js/modules/informationPopup-controller.js":
/*!*******************************************************!*\
  !*** ./src/js/modules/informationPopup-controller.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"closePopup\": () => (/* binding */ closePopup),\n/* harmony export */   \"openPopup\": () => (/* binding */ openPopup)\n/* harmony export */ });\nlet popup = document.querySelector(\".information-popup\");\r\nlet closeButton = popup.querySelector(\".information-popup__close\");\r\nlet popupMainContainer = popup.querySelector(\".information-popup-body__main\");\r\nfunction closePopup() {\r\n  let popupWrapper = document.querySelector(\".information-popup-wrapper\");\r\n  if (popupWrapper) {\r\n    if (!popupWrapper.classList.contains(\"information-popup--hidden\")) {\r\n      popupWrapper.classList.add(\"information-popup--hidden\");\r\n      resetItems();\r\n    }\r\n  }\r\n}\r\n\r\nfunction openPopup() {\r\n  let popupWrapper = document.querySelector(\".information-popup-wrapper\");\r\n  if (popupWrapper) {\r\n    if (popupWrapper.classList.contains(\"information-popup--hidden\")) {\r\n      popupWrapper.classList.remove(\"information-popup--hidden\");\r\n    }\r\n  }\r\n  // fillCalendar(DataFromBase);\r\n  // flsTabs.tabs(\".item-event-tab\");\r\n}\r\n\r\n// close when press the button\r\nif (closeButton) {\r\n  closeButton.addEventListener(\"click\", function () {\r\n    closePopup();\r\n  });\r\n}\r\n\r\nfunction resetItems() {\r\n  // видалення усього\r\n  if (popupMainContainer) {\r\n    popupMainContainer.innerHTML = \"\";\r\n  }\r\n\r\n  // видалення заголовку\r\n  let holidaysPopupTitle = popup.querySelector(\".information-popup__text\");\r\n  if (holidaysPopupTitle) {\r\n    holidaysPopupTitle.innerText = \"\";\r\n  }\r\n  // видалення елементів з хронології канікул та святкових днів\r\n  let chronologyItem = document.querySelectorAll(\r\n    \".information-chronology__item\"\r\n  );\r\n  if (chronologyItem) {\r\n    chronologyItem.forEach((item) => {\r\n      item.remove();\r\n    });\r\n  }\r\n  // видалення елементів з блоку з датами\r\n  let datesBlockItem = document.querySelectorAll(\".information-content__item\");\r\n  if (datesBlockItem) {\r\n    datesBlockItem.forEach((item) => {\r\n      item.remove();\r\n    });\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/informationPopup-controller.js?");

/***/ }),

/***/ "./src/js/modules/navigation.js":
/*!**************************************!*\
  !*** ./src/js/modules/navigation.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"currentPage\": () => (/* binding */ currentPage),\n/* harmony export */   \"navigation\": () => (/* binding */ navigation)\n/* harmony export */ });\nlet currentPage = \"students\";\r\nfunction navigation() {\r\n  let studentnsPage = document.querySelector(\"#main-page\");\r\n  let teachersPage = document.querySelector(\"#teachers-page\");\r\n  let extraclassesPage = document.querySelector(\"#extraclasses-page\");\r\n  let pageWrapper = document.querySelector(\".wrapper\");\r\n  let Page = document.querySelectorAll(\".page\");\r\n  let studentsBtn = document.querySelector(\".students\");\r\n  let teachersBtn = document.querySelector(\".teachers\");\r\n  let extraclassesBtn = document.querySelector(\".extraclasses\");\r\n  let navButtons = document.querySelectorAll(\".menu-header__button\");\r\n\r\n  // remove classes\r\n  Page.forEach((page) => {\r\n    if (page.classList.contains(\"page-hidden\")) {\r\n      page.classList.remove(\"page-hidden\");\r\n    }\r\n  });\r\n\r\n  deletePages();\r\n  pageWrapper.appendChild(studentnsPage);\r\n\r\n  if (location.hash == \"#students\") {\r\n    currentPage = \"students\";\r\n    deletePages();\r\n    pageWrapper.appendChild(studentnsPage);\r\n  } else if (location.hash == \"#teachers\") {\r\n    currentPage = \"teachers\";\r\n    deletePages();\r\n    pageWrapper.appendChild(teachersPage);\r\n  } else if (location.hash == \"#extraclasses\") {\r\n    currentPage = \"extraclasses\";\r\n    deletePages();\r\n    pageWrapper.appendChild(extraclassesPage);\r\n  }\r\n\r\n  navButtons.forEach((navButton) => {\r\n    navButton.addEventListener(\"click\", function () {\r\n      if (navButton.classList.contains(\"students\")) {\r\n        location.href = \"#students\";\r\n        currentPage = \"students\";\r\n        deletePages();\r\n        pageWrapper.appendChild(studentnsPage);\r\n      } else if (navButton.classList.contains(\"teachers\")) {\r\n        location.href = \"#teachers\";\r\n        currentPage = \"teachers\";\r\n        deletePages();\r\n        pageWrapper.appendChild(teachersPage);\r\n      } else if (navButton.classList.contains(\"extraclasses\")) {\r\n        location.href = \"#extraclasses\";\r\n        currentPage = \"extraclasses\";\r\n        deletePages();\r\n        pageWrapper.appendChild(extraclassesPage);\r\n      }\r\n    });\r\n  });\r\n\r\n  window.addEventListener(\"hashchange\", function (e) {\r\n    if (location.hash == \"#students\") {\r\n      currentPage = \"students\";\r\n      deletePages();\r\n      pageWrapper.appendChild(studentnsPage);\r\n    } else if (location.hash == \"#teachers\") {\r\n      currentPage = \"teachers\";\r\n      deletePages();\r\n      pageWrapper.appendChild(teachersPage);\r\n    } else if (location.hash == \"#extraclasses\") {\r\n      currentPage = \"extraclasses\";\r\n      deletePages();\r\n      pageWrapper.appendChild(extraclassesPage);\r\n    }\r\n  });\r\n\r\n  function deletePages() {\r\n    Page.forEach((page) => {\r\n      page.remove();\r\n    });\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/navigation.js?");

/***/ }),

/***/ "./src/js/modules/saved-data.js":
/*!**************************************!*\
  !*** ./src/js/modules/saved-data.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"saveData\": () => (/* binding */ saveData),\n/* harmony export */   \"savedButtonsFunc\": () => (/* binding */ savedButtonsFunc),\n/* harmony export */   \"showSavedData\": () => (/* binding */ showSavedData)\n/* harmony export */ });\nlet savePageOptions = {\r\n  studentsPageSave: false,\r\n  teachersPageSave: false,\r\n  extraPageSave: false,\r\n};\r\nif (!JSON.parse(localStorage.getItem(\"savePageOptions\"))) {\r\n  localStorage.setItem(\"savePageOptions\", JSON.stringify(savePageOptions));\r\n}\r\n\r\nlet saveChoosedOptions = {\r\n  studentsPageSave: \"\",\r\n  teachersPageSave: \"\",\r\n  extraPageSave: \"\",\r\n};\r\nif (!JSON.parse(localStorage.getItem(\"saveChoosedOptions\"))) {\r\n  localStorage.setItem(\r\n    \"saveChoosedOptions\",\r\n    JSON.stringify(saveChoosedOptions)\r\n  );\r\n}\r\n\r\nfunction savedButtonsFunc() {\r\n  changeButtons();\r\n  let saveButton = document.querySelectorAll(\".sidebar-save-option-button\");\r\n  // додаємо функціонал для кнопок авто-збереження даних\r\n  saveButton.forEach((button) => {\r\n    button.addEventListener(\"click\", (e) => {\r\n      // отримуємо дані з локал сторейджа\r\n      let options = JSON.parse(localStorage.getItem(\"savePageOptions\"));\r\n      let savedData = JSON.parse(localStorage.getItem(\"saveChoosedOptions\"));\r\n      if (location.hash == \"#students\") {\r\n        if (options) {\r\n          if (options.studentsPageSave) {\r\n            // якщо при натисненні на кнопку значення тру то міняємо на протилежне та зберігаємо\r\n            options.studentsPageSave = false;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // Чистимо збережений параметр коли вимикаємо\r\n            savedData.studentsPageSave = \"\";\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          } else {\r\n            // якщо при натисненні на кнопку значення фолс то міняємо на протилежне та зберігаємо\r\n            options.studentsPageSave = true;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // зберігаємо поточне значення, якщо воно є\r\n            savedData.studentsPageSave = saveFirstData(button);\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          }\r\n        }\r\n      } else if (location.hash == \"#teachers\") {\r\n        if (options) {\r\n          if (options.teachersPageSave) {\r\n            // якщо при натисненні на кнопку значення тру то міняємо на протилежне та зберігаємо\r\n            options.teachersPageSave = false;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // Чистимо збережений параметр коли вимикаємо\r\n            savedData.teachersPageSave = \"\";\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          } else {\r\n            // якщо при натисненні на кнопку значення фолс то міняємо на протилежне та зберігаємо\r\n            options.teachersPageSave = true;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // зберігаємо поточне значення, якщо воно є\r\n            savedData.teachersPageSave = saveFirstData(button);\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          }\r\n        }\r\n      } else if (location.hash == \"#extraclasses\") {\r\n        if (options) {\r\n          if (options.extraPageSave) {\r\n            // якщо при натисненні на кнопку значення тру то міняємо на протилежне та зберігаємо\r\n            options.extraPageSave = false;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // Чистимо збережений параметр коли вимикаємо\r\n            savedData.extraPageSave = \"\";\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          } else {\r\n            // якщо при натисненні на кнопку значення фолс то міняємо на протилежне та зберігаємо\r\n            options.extraPageSave = true;\r\n            localStorage.setItem(\"savePageOptions\", JSON.stringify(options));\r\n            // зберігаємо поточне значення, якщо воно є\r\n            savedData.extraPageSave = saveFirstData(button);\r\n            localStorage.setItem(\r\n              \"saveChoosedOptions\",\r\n              JSON.stringify(savedData)\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      //міняємо вигляд кнопки в залежності від обраного значення\r\n      changeButtons();\r\n    });\r\n  });\r\n  // додаємо маркери на обрані кнопки\r\n  function changeButtons() {\r\n    let options = JSON.parse(localStorage.getItem(\"savePageOptions\"));\r\n    // перевірка при першому заході на сторінку\r\n    if (location.hash == \"#students\") {\r\n      let page = document.querySelector(\"#main-page\");\r\n      let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n      if (options) {\r\n        if (options.studentsPageSave) {\r\n          if (!saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.add(\"choosed\");\r\n          }\r\n        } else {\r\n          if (saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.remove(\"choosed\");\r\n          }\r\n        }\r\n      }\r\n    } else if (location.hash == \"#teachers\") {\r\n      let page = document.querySelector(\"#teachers-page\");\r\n      let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n      if (options) {\r\n        if (options.teachersPageSave) {\r\n          if (!saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.add(\"choosed\");\r\n          }\r\n        } else {\r\n          if (saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.remove(\"choosed\");\r\n          }\r\n        }\r\n      }\r\n    } else if (location.hash == \"#extraclasses\") {\r\n      let page = document.querySelector(\"#extraclasses-page\");\r\n      let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n      if (options) {\r\n        if (options.extraPageSave) {\r\n          if (!saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.add(\"choosed\");\r\n          }\r\n        } else {\r\n          if (saveButton.classList.contains(\"choosed\")) {\r\n            saveButton.classList.remove(\"choosed\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //перевірка при переході на іншу сторінку\r\n    window.addEventListener(\"hashchange\", function (e) {\r\n      let options = JSON.parse(localStorage.getItem(\"savePageOptions\"));\r\n      if (location.hash == \"#students\") {\r\n        let page = document.querySelector(\"#main-page\");\r\n        let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n        if (options) {\r\n          if (options.studentsPageSave) {\r\n            if (!saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.add(\"choosed\");\r\n            }\r\n          } else {\r\n            if (saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.remove(\"choosed\");\r\n            }\r\n          }\r\n        }\r\n      } else if (location.hash == \"#teachers\") {\r\n        let page = document.querySelector(\"#teachers-page\");\r\n        let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n        if (options) {\r\n          if (options.teachersPageSave) {\r\n            if (!saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.add(\"choosed\");\r\n            }\r\n          } else {\r\n            if (saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.remove(\"choosed\");\r\n            }\r\n          }\r\n        }\r\n      } else if (location.hash == \"#extraclasses\") {\r\n        let page = document.querySelector(\"#extraclasses-page\");\r\n        let saveButton = page.querySelector(\".sidebar-save-option-button\");\r\n        if (options) {\r\n          if (options.extraPageSave) {\r\n            if (!saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.add(\"choosed\");\r\n            }\r\n          } else {\r\n            if (saveButton.classList.contains(\"choosed\")) {\r\n              saveButton.classList.remove(\"choosed\");\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// збереження даних, як тільки ми обрали авто збереження\r\nfunction saveFirstData(saveButton) {\r\n  let buttonParent = saveButton.closest(\".sidebar-nav__item-row\");\r\n  let blockWithTextForSaving = buttonParent.querySelector(\r\n    \".dropdown__button-text\"\r\n  );\r\n  let textForSaving = blockWithTextForSaving.innerText;\r\n  return textForSaving;\r\n}\r\n\r\n// автоматичне збереження даних при виборі налаштувань\r\n// дописати\r\nfunction saveData(button) {\r\n  //   let buttonParent = button.closest(\".sidebar-nav__item-row\");\r\n  let blockWithTextForSaving = button.querySelector(\".dropdown__button-text\");\r\n  let textForSaving = blockWithTextForSaving.innerText;\r\n  console.log(textForSaving);\r\n}\r\n\r\nfunction showSavedData() {\r\n  let pageOptions = JSON.parse(localStorage.getItem(\"savePageOptions\"));\r\n  return pageOptions;\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/saved-data.js?");

/***/ }),

/***/ "./src/js/modules/tabs.js":
/*!********************************!*\
  !*** ./src/js/modules/tabs.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"tabs\": () => (/* binding */ tabs)\n/* harmony export */ });\nfunction closeAllTabs(itemTabs) {\r\n  for (let i = 0; i < itemTabs.length; i++) {\r\n    if (itemTabs[i].classList.contains(\"tab-active\")) {\r\n      itemTabs[i].classList.remove(\"tab-active\");\r\n    }\r\n  }\r\n}\r\nfunction closeTab(tab) {\r\n  if (tab.classList.contains(\"tab-active\")) {\r\n    tab.classList.remove(\"tab-active\");\r\n  }\r\n}\r\nfunction tabs($tabclass, closeAll = false) {\r\n  let tabs = document.querySelectorAll($tabclass);\r\n  if (!closeAll) {\r\n    tabs.forEach((tab) => {\r\n      let tabHeader = tab.querySelector(\".tab-header\");\r\n      tabHeader.addEventListener(\"click\", function (e) {\r\n        if (!tab.classList.contains(\"tab-active\")) {\r\n          tab.classList.add(\"tab-active\");\r\n        } else {\r\n          closeTab(tab);\r\n        }\r\n      });\r\n    });\r\n  } else {\r\n    tabs.forEach((tab) => {\r\n      let tabHeader = tab.querySelector(\".tab-header\");\r\n      tabHeader.addEventListener(\"click\", function (e) {\r\n        if (!tab.classList.contains(\"tab-active\")) {\r\n          closeAllTabs(tabs);\r\n          tab.classList.add(\"tab-active\");\r\n        } else {\r\n          closeTab(tab);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // for (let i = 0; i < tab.length; i++) {\r\n  //   tab[i].addEventListener(\"click\", function (e) {\r\n  //     let tabContentBlock = tab[i].querySelector(\".tab-content\");\r\n\r\n  //     if (!tab[i].classList.contains(\"tab-active\")) {\r\n  //       resetActive(tab);\r\n  //       tab[i].classList.add(\"tab-active\");\r\n  //     } else {\r\n  //       resetActive(tab);\r\n  //     }\r\n  //   });\r\n  // }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/tabs.js?");

/***/ }),

/***/ "./src/js/modules/timeManagement.js":
/*!******************************************!*\
  !*** ./src/js/modules/timeManagement.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IsHolidays\": () => (/* binding */ IsHolidays),\n/* harmony export */   \"studingConditional\": () => (/* binding */ studingConditional),\n/* harmony export */   \"timeManagement\": () => (/* binding */ timeManagement),\n/* harmony export */   \"weeks\": () => (/* binding */ weeks),\n/* harmony export */   \"weeksDates\": () => (/* binding */ weeksDates)\n/* harmony export */ });\nlet weeksDates = [];\r\nlet weeks = {};\r\nlet studingConditional = true;\r\nlet IsHolidays = false;\r\nfunction timeManagement(data) {\r\n  let currDate = new Date().getTime();\r\n  let maxCountOfWeeks = data.MaxCountOfWeeks;\r\n  let AcademicYearRange = data.AcademicYear;\r\n  let AcademicYearSplited = AcademicYearRange.split(\"-\");\r\n  let AcademicYearSplitedFirst = AcademicYearSplited[0].split(\".\");\r\n  let AcademicYearSplitedSecond = AcademicYearSplited[1].split(\".\");\r\n  AcademicYearRange =\r\n    AcademicYearSplitedFirst[2] +\r\n    \"-\" +\r\n    AcademicYearSplitedFirst[1] +\r\n    \"-\" +\r\n    AcademicYearSplitedFirst[0] +\r\n    \"/\" +\r\n    AcademicYearSplitedSecond[2] +\r\n    \"-\" +\r\n    AcademicYearSplitedSecond[1] +\r\n    \"-\" +\r\n    AcademicYearSplitedSecond[0];\r\n\r\n  // let Holidays = data.Events;\r\n  let Holidays = data.Vacations;\r\n  let FirstWeek = data.FirstWeek;\r\n  let firstWeekSplited = FirstWeek.split(\".\");\r\n  FirstWeek = [\r\n    firstWeekSplited[2] + \"-\" + firstWeekSplited[1] + \"-\" + firstWeekSplited[0],\r\n  ];\r\n  if (isAcademicYear) {\r\n    if (isHoliday()) {\r\n      IsHolidays = true;\r\n      getCurrWeek();\r\n    } else {\r\n      IsHolidays = false;\r\n      getCurrWeek();\r\n    }\r\n  } else {\r\n    IsHolidays = true;\r\n  }\r\n\r\n  // functions ===========================\r\n  function isAcademicYear() {\r\n    let isacademicyear = false;\r\n    let year = AcademicYearRange.split(\"/\");\r\n    let AcademicYearBeginning = new Date(year[0]).getTime();\r\n    let AcademicYearEnding = new Date(year[1]).getTime();\r\n    if (currDate >= AcademicYearBeginning && currDate <= AcademicYearEnding) {\r\n      isacademicyear = true;\r\n      studingConditional = true;\r\n    } else studingConditional = false;\r\n    return isacademicyear;\r\n  }\r\n\r\n  function isHoliday() {\r\n    let isholiday = false;\r\n    if (Array.isArray(Holidays)) {\r\n      Holidays.forEach((holiday) => {\r\n        let SplitedHoliday = holiday[1].split(\"-\");\r\n        let holdiayBeginningDate = SplitedHoliday[0].split(\".\");\r\n        holdiayBeginningDate =\r\n          holdiayBeginningDate[2] +\r\n          \"-\" +\r\n          holdiayBeginningDate[1] +\r\n          \"-\" +\r\n          holdiayBeginningDate[0];\r\n        let holdiayEndingDate = SplitedHoliday[1].split(\".\");\r\n        holdiayEndingDate =\r\n          holdiayEndingDate[2] +\r\n          \"-\" +\r\n          holdiayEndingDate[1] +\r\n          \"-\" +\r\n          holdiayEndingDate[0];\r\n        let HolidayBeginning = new Date(holdiayBeginningDate).getTime();\r\n        let HolidayEnding = new Date(holdiayEndingDate).getTime();\r\n        if (currDate >= HolidayBeginning && currDate <= HolidayEnding) {\r\n          isholiday = true;\r\n          studingConditional = false;\r\n        }\r\n      });\r\n    }\r\n    return isholiday;\r\n    // return true;\r\n  }\r\n  function getCurrWeek() {\r\n    weeksDates.push(FirstWeek);\r\n    let firstDaySec = new Date(FirstWeek).getTime();\r\n    let firstDay = new Date(FirstWeek).getDay();\r\n    let weekDate;\r\n    let firstWeekMon;\r\n    if (firstDay == 1) {\r\n      firstWeekMon = FirstWeek;\r\n      getWeeks(firstWeekMon);\r\n    } else {\r\n      let day;\r\n      let daySec = firstDaySec;\r\n      let dayNum;\r\n      let flag = true;\r\n      while (flag) {\r\n        daySec = daySec + 86400000;\r\n        day = new Date(daySec);\r\n        dayNum = day.getDay();\r\n        if (dayNum == 1) {\r\n          weekDate = new Date(daySec);\r\n          flag = false;\r\n        }\r\n      }\r\n      firstWeekMon = compileDate(weekDate);\r\n      weeksDates.push(compileDate(weekDate));\r\n      getWeeks(firstWeekMon);\r\n    }\r\n    countWeeks(weeksDates);\r\n  }\r\n\r\n  function compileDate(dateAsInt) {\r\n    let weekDateStr;\r\n    let yy = dateAsInt.getFullYear();\r\n    let mm = dateAsInt.getMonth() + 1;\r\n    let dd = dateAsInt.getDate();\r\n    weekDateStr =\r\n      yy + \"-\" + (mm < 10 ? \"0\" + mm : mm) + \"-\" + (dd < 10 ? \"0\" + dd : dd);\r\n    return weekDateStr;\r\n  }\r\n\r\n  function getWeeks(firstDayInFirstWeek) {\r\n    let firstDay = firstDayInFirstWeek;\r\n    let firstDayInt = new Date(firstDay).getTime();\r\n    let year = AcademicYearRange.split(\"/\");\r\n    let AcademicYearBeginning = new Date(year[0]).getTime();\r\n    let AcademicYearEnding = new Date(year[1]).getTime();\r\n    for (let i = firstDayInt; i < AcademicYearEnding; i) {\r\n      firstDayInt = firstDayInt + 604800000;\r\n      if (firstDayInt <= AcademicYearEnding) {\r\n        let date = new Date(firstDayInt);\r\n        weeksDates.push(compileDate(date));\r\n        i = i + 604800000;\r\n      } else return false;\r\n    }\r\n  }\r\n\r\n  function countWeeks(weeksArr) {\r\n    let numOfWeek = 1;\r\n    for (let i = 0; i < weeksArr.length; i++) {\r\n      if (numOfWeek > maxCountOfWeeks) {\r\n        numOfWeek = 1;\r\n      }\r\n      weeks[i + 1] = numOfWeek;\r\n      numOfWeek++;\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/timeManagement.js?");

/***/ }),

/***/ "./src/js/modules/upcomingEvents.js":
/*!******************************************!*\
  !*** ./src/js/modules/upcomingEvents.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UpcomingEvents\": () => (/* binding */ UpcomingEvents)\n/* harmony export */ });\n/* harmony import */ var _informationPopup_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./informationPopup-controller.js */ \"./src/js/modules/informationPopup-controller.js\");\n/* harmony import */ var _tabs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabs.js */ \"./src/js/modules/tabs.js\");\n/* harmony import */ var _developerFunctions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./developerFunctions.js */ \"./src/js/modules/developerFunctions.js\");\n\r\n\r\n\r\nfunction UpcomingEvents(data) {\r\n  let dates = data.TimeManagementData;\r\n  let upcommingEventData = findUpcommingEvent(dates).upcomingEventItem;\r\n  if (upcommingEventData != undefined) {\r\n    let UpcomingEvents = document.querySelectorAll(\".upcoming-events\");\r\n    if (UpcomingEvents) {\r\n      UpcomingEvents.forEach((item) => {\r\n        let UpcomingEventsContent = item.querySelector(\r\n          \".upcoming-events-content\"\r\n        );\r\n        //чистимо елементи якщо вони існують\r\n        let EventItem = document.querySelectorAll(\".upcoming-events-item\");\r\n        if (EventItem) {\r\n          EventItem.forEach((item) => {\r\n            item.remove();\r\n          });\r\n        }\r\n        if (upcommingEventData != \"\" && upcommingEventData != \" \") {\r\n          let upcomingEventItem = document.createElement(\"div\");\r\n          upcomingEventItem.classList.add(\r\n            \"upcoming-events-content__item\",\r\n            \"upcoming-events-item\"\r\n          );\r\n          let upcomingEventItemContent = document.createElement(\"div\");\r\n          upcomingEventItemContent.classList.add(\r\n            \"upcoming-events-item__content\"\r\n          );\r\n          let upcomingEventItemContentDate = document.createElement(\"div\");\r\n          upcomingEventItemContentDate.classList.add(\r\n            \"upcoming-events-item__date-and-time\"\r\n          );\r\n          let upcomingEventItemContentName = document.createElement(\"div\");\r\n          upcomingEventItemContentName.classList.add(\r\n            \"upcoming-events-item__name\"\r\n          );\r\n\r\n          let upcomingEventItemButton = document.createElement(\"div\");\r\n          upcomingEventItemButton.classList.add(\"upcoming-events-item__button\");\r\n\r\n          //наповнення елементу\r\n          upcomingEventItemContentDate.innerText =\r\n            upcommingEventData[0] + \" \" + upcommingEventData[1];\r\n          upcomingEventItemContentName.innerText = upcommingEventData[2];\r\n          upcomingEventItemButton.innerText = \"інформація\";\r\n          // збирання елементу\r\n          upcomingEventItem.appendChild(upcomingEventItemContent);\r\n          upcomingEventItemContent.appendChild(upcomingEventItemContentDate);\r\n          upcomingEventItemContent.appendChild(upcomingEventItemContentName);\r\n          upcomingEventItem.appendChild(upcomingEventItemButton);\r\n          UpcomingEventsContent.appendChild(upcomingEventItem);\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    let UpcomingEvents = document.querySelectorAll(\".upcoming-events\");\r\n    if (UpcomingEvents) {\r\n      UpcomingEvents.forEach((item) => {\r\n        let UpcomingEventsContent = item.querySelector(\r\n          \".upcoming-events-content\"\r\n        );\r\n        //чистимо елементи якщо вони існують\r\n        let EventItem = document.querySelectorAll(\".upcoming-events-item\");\r\n        if (EventItem) {\r\n          EventItem.forEach((item) => {\r\n            item.remove();\r\n          });\r\n        }\r\n        if (upcommingEventData != \"\" && upcommingEventData != \" \") {\r\n          let upcomingEventItem = document.createElement(\"div\");\r\n          upcomingEventItem.classList.add(\r\n            \"upcoming-events-content__item\",\r\n            \"upcoming-events-item\"\r\n          );\r\n          let upcomingEventItemContent = document.createElement(\"div\");\r\n          upcomingEventItemContent.classList.add(\r\n            \"upcoming-events-item__content\"\r\n          );\r\n          let upcomingEventItemContentName = document.createElement(\"div\");\r\n          upcomingEventItemContentName.classList.add(\r\n            \"upcoming-events-item__name\"\r\n          );\r\n\r\n          let upcomingEventItemButton = document.createElement(\"div\");\r\n          upcomingEventItemButton.classList.add(\"upcoming-events-item__button\");\r\n\r\n          //наповнення елементу\r\n          upcomingEventItemContentName.innerText =\r\n            \"Сталася помилка при знаходження найближчої події, переглянути всі події можете натиснувши на кнопку\";\r\n          upcomingEventItemButton.innerText = \"інформація\";\r\n          // збирання елементу\r\n          upcomingEventItem.appendChild(upcomingEventItemContent);\r\n\r\n          upcomingEventItemContent.appendChild(upcomingEventItemContentName);\r\n          upcomingEventItem.appendChild(upcomingEventItemButton);\r\n          UpcomingEventsContent.appendChild(upcomingEventItem);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  let infoButton = document.querySelector(\".upcoming-events-item__button\");\r\n  if (infoButton) {\r\n    infoButton.addEventListener(\"click\", function () {\r\n      _informationPopup_controller_js__WEBPACK_IMPORTED_MODULE_0__.openPopup();\r\n      fillEventsPopup(data);\r\n    });\r\n  }\r\n}\r\n\r\nfunction fillEventsPopup(data) {\r\n  let EventsData = data.TimeManagementData.Events;\r\n  // create title\r\n  let title = _developerFunctions_js__WEBPACK_IMPORTED_MODULE_2__.createElement(\r\n    \"h3\",\r\n    [\"information-popup__text\", \"events-information-popup__text\"],\r\n    \"Події\",\r\n    \"information-popup-body__main\"\r\n  );\r\n  // create content body (parent)\r\n  let contentBlock = _developerFunctions_js__WEBPACK_IMPORTED_MODULE_2__.createElement(\r\n    \"div\",\r\n    [\r\n      \"information-popup__content\",\r\n      \"information-content\",\r\n      \"events-information-content\",\r\n    ],\r\n    \"\",\r\n    \"information-popup-body__main\"\r\n  );\r\n\r\n  // create elements\r\n\r\n  EventsData.forEach((item) => {\r\n    // створення елементу\r\n    let datesBlockItem = document.createElement(\"div\");\r\n    datesBlockItem.classList.add(\r\n      \"events-content__item\",\r\n      \"events-content__item-event-tab\",\r\n      \"item-event-tab\"\r\n    );\r\n    // створення шапки табу\r\n    let datesblockItemHeader = document.createElement(\"div\");\r\n    datesblockItemHeader.classList.add(\r\n      \"item-event-tab__header\",\r\n      \"item-header\",\r\n      \"tab-header\"\r\n    );\r\n    let datesblockItemHeaderContent = document.createElement(\"div\");\r\n    datesblockItemHeaderContent.classList.add(\"item-header__content\");\r\n    let datesblockItemHeaderContentDate = document.createElement(\"p\");\r\n    datesblockItemHeaderContentDate.classList.add(\"item-header__content-date\");\r\n    // datesblockItemHeaderContentDate.innerText = item[0] + \" \" + item[1];\r\n    let spanDate = _developerFunctions_js__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\", [\"date\"], item[0]);\r\n    let spanTime = _developerFunctions_js__WEBPACK_IMPORTED_MODULE_2__.createElement(\"span\", [\"time\"], item[1]);\r\n    datesblockItemHeaderContentDate.appendChild(spanDate);\r\n    datesblockItemHeaderContentDate.appendChild(spanTime);\r\n    let datesblockItemHeaderContentEvent = document.createElement(\"p\");\r\n    datesblockItemHeaderContentEvent.classList.add(\r\n      \"item-header__content-event\"\r\n    );\r\n    datesblockItemHeaderContentEvent.innerText = item[2];\r\n    //створення кнопки табу\r\n    let datesblockItemHeaderButton = document.createElement(\"div\");\r\n    datesblockItemHeaderButton.classList.add(\"item-header__button\");\r\n    let datesblockItemHeaderButtonImg = document.createElement(\"img\");\r\n    datesblockItemHeaderButtonImg.src = \"img/events-tab-arrow.svg\";\r\n    datesblockItemHeaderButton.appendChild(datesblockItemHeaderButtonImg);\r\n    datesblockItemHeader.appendChild(datesblockItemHeaderContent);\r\n    datesblockItemHeader.appendChild(datesblockItemHeaderButton);\r\n    datesblockItemHeaderContent.appendChild(datesblockItemHeaderContentDate);\r\n    datesblockItemHeaderContent.appendChild(datesblockItemHeaderContentEvent);\r\n\r\n    //створення контенту табу\r\n    let datesblockItemContent = document.createElement(\"div\");\r\n    datesblockItemContent.classList.add(\r\n      \"item-event-tab__content\",\r\n      \"item-content\",\r\n      \"tab-content\"\r\n    );\r\n    let datesblockItemContentText = document.createElement(\"p\");\r\n    datesblockItemContentText.classList.add(\"item-content__text\");\r\n    datesblockItemContentText.innerHTML = parseLinks(item[3]);\r\n    // console.log();\r\n\r\n    // parsedContent(item[3]);\r\n    datesblockItemContent.appendChild(datesblockItemContentText);\r\n\r\n    // наповнення табу\r\n    datesBlockItem.appendChild(datesblockItemHeader);\r\n    datesBlockItem.appendChild(datesblockItemContent);\r\n\r\n    //вставка табу в контент блок\r\n    contentBlock.appendChild(datesBlockItem);\r\n  });\r\n\r\n  // mark current item\r\n  markUpcommingItem(\r\n    contentBlock.childNodes,\r\n    findUpcommingEvent(data.TimeManagementData).stringDateOFUpcommingEvent\r\n  );\r\n\r\n  //скролл до поточного елементу\r\n  let upcomingEventItem = contentBlock.querySelector(\r\n    \".item-event-tab-upcoming\"\r\n  );\r\n  scrollToUpcommingElement(upcomingEventItem, contentBlock);\r\n\r\n  // додавання функціоналу для відкриття табів\r\n  _tabs_js__WEBPACK_IMPORTED_MODULE_1__.tabs(\".item-event-tab\", true);\r\n}\r\n\r\n// виділення елементу з найближною подією\r\nfunction markUpcommingItem(itemArr, upcommingDateStr) {\r\n  if (itemArr) {\r\n    itemArr.forEach((eventItem) => {\r\n      let eventItemDateBlock = eventItem.querySelector(\r\n        \".item-header__content-date\"\r\n      );\r\n      let eventItemDate = eventItemDateBlock.querySelector(\".date\").innerHTML;\r\n      if (eventItemDate == upcommingDateStr) {\r\n        eventItem.classList.add(\"item-event-tab-upcoming\");\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// скролл до поточного елементу\r\nfunction scrollToUpcommingElement(element, parent) {\r\n  if (element && parent) {\r\n    let elementPositionY = element.offsetTop;\r\n    let elementHeight = element.offsetHeight;\r\n    parent.scrollTo({\r\n      top: elementPositionY - 10,\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n}\r\n\r\n// перевірка найближчої дати\r\nfunction findUpcommingEvent(DataFromBase) {\r\n  let upcomingEvent;\r\n  let currDate = new Date().getTime();\r\n  let allUpcomingEvents = [];\r\n  let events = DataFromBase.Events;\r\n  let dateOfUpcomingEvent;\r\n  if (events) {\r\n    events.forEach((item) => {\r\n      if (item[0] != \"\" && item[0] != \" \") {\r\n        if (item[0].split(\"-\").length > 1 == false) {\r\n          let eventFullDate = new Date(transformDate(item[0]));\r\n          let eventDate = new Date(\r\n            eventFullDate.getFullYear(),\r\n            eventFullDate.getMonth(),\r\n            eventFullDate.getDate(),\r\n            parseInt(23),\r\n            parseInt(59)\r\n          ).getTime();\r\n          if (currDate <= eventDate) {\r\n            allUpcomingEvents.push(eventDate);\r\n          }\r\n        } else {\r\n          let eventDateSplited = item[0].split(\"-\");\r\n          let eventStartFullDate = new Date(transformDate(eventDateSplited[0]));\r\n          let eventEndFullDate = new Date(transformDate(eventDateSplited[1]));\r\n          let eventStartDate = new Date(\r\n            eventStartFullDate.getFullYear(),\r\n            eventStartFullDate.getMonth(),\r\n            eventStartFullDate.getDate(),\r\n            parseInt(23),\r\n            parseInt(59)\r\n          ).getTime();\r\n          let eventEndDate = new Date(\r\n            eventEndFullDate.getFullYear(),\r\n            eventEndFullDate.getMonth(),\r\n            eventEndFullDate.getDate(),\r\n            parseInt(23),\r\n            parseInt(59)\r\n          ).getTime();\r\n\r\n          if (currDate <= eventStartDate) {\r\n            allUpcomingEvents.push(eventStartDate);\r\n          } else if (currDate > eventStartDate && currDate <= eventEndDate) {\r\n            allUpcomingEvents.push(eventEndDate);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // знаходимо найменшу дату\r\n  dateOfUpcomingEvent = allUpcomingEvents[0];\r\n  allUpcomingEvents.forEach((item) => {\r\n    if (item <= dateOfUpcomingEvent) {\r\n      dateOfUpcomingEvent = item;\r\n    }\r\n  });\r\n\r\n  // переводимо найменшу дату в формат дд.мм.рррр\r\n  let day;\r\n  let mounth;\r\n  let year = new Date(dateOfUpcomingEvent).getFullYear();\r\n  if (new Date(dateOfUpcomingEvent).getDate() < 10) {\r\n    day = \"0\" + new Date(dateOfUpcomingEvent).getDate();\r\n  } else {\r\n    day = new Date(dateOfUpcomingEvent).getDate();\r\n  }\r\n  if (new Date(dateOfUpcomingEvent).getMonth() < 9) {\r\n    mounth = \"0\" + (new Date(dateOfUpcomingEvent).getMonth() + 1);\r\n  }\r\n  let dateOfUpcomingEventStr = day + \".\" + mounth + \".\" + year;\r\n\r\n  // знаходимо елемент з цією датою\r\n  if (events) {\r\n    events.forEach((item) => {\r\n      if (item[0] != \"\" && item[0] != \" \") {\r\n        if (item[0].split(\"-\").length > 1 == false) {\r\n          if (dateOfUpcomingEventStr == item[0]) {\r\n            upcomingEvent = item;\r\n          }\r\n        } else {\r\n          let eventDateSplited = item[0].split(\"-\");\r\n          if (\r\n            eventDateSplited[0] == dateOfUpcomingEventStr ||\r\n            eventDateSplited[1] == dateOfUpcomingEventStr\r\n          ) {\r\n            upcomingEvent = item;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  let returnData = {\r\n    upcomingEventItem: upcomingEvent,\r\n    stringDateOFUpcommingEvent: dateOfUpcomingEventStr,\r\n    numberDateOFUpcommingEvent: dateOfUpcomingEvent,\r\n  };\r\n  return returnData;\r\n}\r\nfunction transformDate(date) {\r\n  let splitedDate = date.split(\".\");\r\n  let transformedDate = [\r\n    splitedDate[2] + \"-\" + splitedDate[1] + \"-\" + splitedDate[0],\r\n  ];\r\n  return transformedDate;\r\n}\r\n\r\nfunction parseLinks(content) {\r\n  content = content.replace(/\\n/g, \"<br>\");\r\n  content = content.replace(\r\n    /\\b(https?\\:\\/\\/\\S+)/gm,\r\n    `<a target='_blank' href=\"$1\">$1</a>`\r\n  );\r\n  return content;\r\n}\r\n\n\n//# sourceURL=webpack://mygulp/./src/js/modules/upcomingEvents.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;